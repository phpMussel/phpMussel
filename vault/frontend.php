<?php
/**
 * This file is a part of the phpMussel package.
 * Homepage: https://phpmussel.github.io/
 *
 * PHPMUSSEL COPYRIGHT 2013 AND BEYOND BY THE PHPMUSSEL TEAM.
 *
 * License: GNU/GPLv2
 * @see LICENSE.txt
 *
 * This file: Front-end handler (last modified: 2022.08.20).
 */

/** Prevents execution from outside of phpMussel. */
if (!defined('phpMussel')) {
    die('[phpMussel] This should not be accessed directly.');
}

/** Kill the script if the front-end functions file doesn't exist. */
if (!file_exists($phpMussel['Vault'] . 'frontend_functions.php')) {
    header('Content-Type: text/plain');
    die('[phpMussel] Front-end functions file missing! Please reinstall phpMussel.');
}

/** Load the front-end functions file. */
require $phpMussel['Vault'] . 'frontend_functions.php';

/** Set page selector if not already set. */
if (empty($phpMussel['QueryVars']['phpmussel-page'])) {
    $phpMussel['QueryVars']['phpmussel-page'] = '';
}

/** Populate common front-end variables. */
$phpMussel['FE'] = [
    /** "Generated by ..." line. */
    'GeneratedBy' => sprintf(
        $phpMussel['L10N']->getString('generated_by'),
        '<div class="txtRd" dir="ltr">' . $phpMussel['ScriptIdent'] . '</div>'
    ),

    /** Main front-end HTML template file. */
    'Template' => $phpMussel['ReadFile']($phpMussel['GetAssetPath']('frontend.html')),

    /** Populated by front-end JavaScript data as per needed. */
    'JS' => '',

    /** Default password hash ("password"). */
    'DefaultPassword' => '$2y$10$FPF5Im9MELEvF5AYuuRMSO.QKoYVpsiu1YU9aDClgrU57XtLof/dK',

    /** Current default language. */
    'FE_Lang' => $phpMussel['Config']['general']['lang'],

    /** Font magnification. */
    'Magnification' => $phpMussel['Config']['template_data']['magnification'],

    /** Define active configuration file. */
    'ActiveConfigFile' => !empty($phpMussel['Overrides']) ? $phpMussel['Domain'] . '.config.ini' : 'config.ini',

    /** Current time and date. */
    'DateTime' => $phpMussel['TimeFormat']($phpMussel['Time'], $phpMussel['Config']['general']['time_format']),

    /** How the script identifies itself. */
    'ScriptIdent' => $phpMussel['ScriptIdent'],

    /** Current default theme. */
    'theme' => $phpMussel['Config']['template_data']['theme'],

    /** List of front-end users will be populated here. */
    'UserList' => "\n",

    /** List of front-end sessions will be populated here. */
    'SessionList' => "\n",

    /** Cache data will be populated here. */
    'Cache' => "\n",

    /**
     * The current user state.
     * -1 = Attempted and failed to log in.
     * 0 = Not logged in.
     * 1 = Logged in.
     * 2 = Logged in, but awaiting two-factor authentication.
     */
    'UserState' => 0,

    /** Taken from either $_POST['username'] or $_COOKIE['PHPMUSSEL-ADMIN'] (the username claimed by the client). */
    'UserRaw' => '',

    /**
     * User permissions.
     * 0 = Not logged in, or awaiting two-factor authentication.
     * 1 = Complete access.
     * 2 = Logs access only.
     * 3 = Cronable.
     */
    'Permissions' => 0,

    /** Will be populated by messages reflecting the current request state. */
    'state_msg' => '',

    /** Will be populated by the current session data. */
    'ThisSession' => '',

    /** Used to log out. */
    'LogoutButton' => sprintf(
        '<form action="?phpmussel-page=logout" method="POST" style="display:inline">%s%s<input type="submit" id="logoutbutton" value="%s" class="auto" /></form>',
        '<input name="hostname" id="hostnameoverride" type="hidden" value="" />',
        '<script type="text/javascript">document.getElementById(\'hostnameoverride\').value=window.location.hostname;</script>',
        $phpMussel['L10N']->getString('link_log_out')
    ),

    /** Used to return home. */
    'HomeButton' => sprintf(
        '<form action="?" method="GET" style="display:inline"><input type="submit" id="homebutton" value="%s" class="auto" /></form>',
        $phpMussel['L10N']->getString('link_home')
    ),

    /** State reflecting whether the current request is cronable. */
    'CronMode' => $_POST['CronMode'] ?? '',

    /** The user agent of the current request. */
    'UA' => $_SERVER['HTTP_USER_AGENT'] ?? '',

    /** The IP address of the current request. */
    'YourIP' => $phpMussel['IPAddr'],

    /** Asynchronous mode. */
    'ASYNC' => !empty($_POST['ASYNC']),

    /** Will be populated by the page title. */
    'FE_Title' => '',

    /** Make some of the link references available to the main front-end array. */
    'Links.Discussions' => $phpMussel['Config']['Links']['Discussions'],
    'Links.Documentation' => $phpMussel['Config']['Links']['Documentation'],
    'Links.Website' => $phpMussel['Config']['Links']['Website']
];

/** Trace to determine the type of cron operation. */
if ($phpMussel['FE']['CronMode'] !== '') {
    $phpMussel['FE']['CronType'] = 'update';
    $phpMussel['CronDebug'] = debug_backtrace(DEBUG_BACKTRACE_PROVIDE_OBJECT | DEBUG_BACKTRACE_IGNORE_ARGS, 4);
    foreach ($phpMussel['CronDebug'] as $phpMussel['ThisCronDebug']) {
        if (
            isset($phpMussel['ThisCronDebug']['function'], $phpMussel['ThisCronDebug']['class']) &&
            $phpMussel['ThisCronDebug']['function'] === 'localUpdate' &&
            $phpMussel['ThisCronDebug']['class'] === 'Maikuolan\Cronable\Cronable'
        ) {
            $phpMussel['FE']['CronType'] = 'localUpdate';
        }
    }
    unset($phpMussel['CronDebug'], $phpMussel['ThisCronDebug']);
} else {
    $phpMussel['FE']['CronType'] = '';
}

/** Populated by [Home | Log Out] by default; Replaced by [Log Out] for some specific pages (e.g., the homepage). */
$phpMussel['FE']['bNav'] = $phpMussel['FE']['HomeButton'] . $phpMussel['FE']['LogoutButton'];

/** To be populated by warnings. */
$phpMussel['Warnings'] = [];

/** Warns if maintenance mode is enabled. */
if ($phpMussel['Config']['general']['maintenance_mode']) {
    $phpMussel['Warnings'][] = $phpMussel['L10N']->getString('state_maintenance_mode');
}

/** Warns if no signature files are active. */
if (empty($phpMussel['Config']['signatures']['active'])) {
    $phpMussel['Warnings'][] = $phpMussel['L10N']->getString('warning_signatures_1');
}

/** Prepare warnings. */
$phpMussel['FE']['Warnings'] = count($phpMussel['Warnings']) ? "\n<div class=\"center\"><div class=\"warning\">" . implode(
    "</div>\n<div class=\"warning\">",
    $phpMussel['Warnings']
) . '</div></div><hr />' : '';

/** Cleanup. */
unset($phpMussel['Warnings']);

/** Plugin hook: "frontend_before". */
$phpMussel['Execute_Hook']('frontend_before');

/** Menu toggle JavaScript, needed by some front-end pages. */
$phpMussel['MenuToggle'] = '<script type="text/javascript">' .
    'var i,toggler=document.getElementsByClassName("comCat");for(i=0;i<toggl' .
    'er.length;i++)toggler[i].addEventListener("click",function(){this.paren' .
    'tElement.querySelector(".comSub").classList.toggle("active"),!this.clas' .
    'sList.toggle("caret-down")&&this.classList.toggle("caret-up")&&setTimeo' .
    'ut(function(t){t.classList.toggle("caret-up")},200,this)});</script>';

/** Fetch pips data. */
$phpMussel['Pips_Path'] = $phpMussel['GetAssetPath']('pips.php', true);
if (!empty($phpMussel['Pips_Path']) && is_readable($phpMussel['Pips_Path'])) {
    require $phpMussel['Pips_Path'];
}

/** A fix for correctly displaying LTR/RTL text. */
if (empty($phpMussel['L10N']->Data['Text Direction']) || $phpMussel['L10N']->Data['Text Direction'] !== 'rtl') {
    $phpMussel['L10N']->Data['Text Direction'] = 'ltr';
    $phpMussel['FE']['FE_Align'] = 'left';
    $phpMussel['FE']['FE_Align_Reverse'] = 'right';
    $phpMussel['FE']['FE_Align_Mode'] = 'lr';
    $phpMussel['FE']['PIP_Input'] = $phpMussel['FE']['PIP_Right'];
    $phpMussel['FE']['PIP_Input_Valid'] = $phpMussel['FE']['PIP_Right_Valid'];
    $phpMussel['FE']['PIP_Input_Invalid'] = $phpMussel['FE']['PIP_Right_Invalid'];
    $phpMussel['FE']['Half_Border'] = 'solid solid none none';
    $phpMussel['FE']['45deg'] = '45deg';
    $phpMussel['FE']['90deg'] = '90deg';
} else {
    $phpMussel['FE']['FE_Align'] = 'right';
    $phpMussel['FE']['FE_Align_Reverse'] = 'left';
    $phpMussel['FE']['FE_Align_Mode'] = 'rl';
    $phpMussel['FE']['PIP_Input'] = $phpMussel['FE']['PIP_Left'];
    $phpMussel['FE']['PIP_Input_Valid'] = $phpMussel['FE']['PIP_Left_Valid'];
    $phpMussel['FE']['PIP_Input_Invalid'] = $phpMussel['FE']['PIP_Left_Invalid'];
    $phpMussel['FE']['Half_Border'] = 'solid none none solid';
    $phpMussel['FE']['45deg'] = '-45deg';
    $phpMussel['FE']['90deg'] = '270deg';
}

/** A simple passthru for non-private theme images and related data. */
if (!empty($phpMussel['QueryVars']['phpmussel-asset'])) {
    $phpMussel['Success'] = false;

    if (
        $phpMussel['FileManager-PathSecurityCheck']($phpMussel['QueryVars']['phpmussel-asset']) &&
        !preg_match('~[^\da-z._]~i', $phpMussel['QueryVars']['phpmussel-asset'])
    ) {
        $phpMussel['ThisAsset'] = $phpMussel['GetAssetPath']($phpMussel['QueryVars']['phpmussel-asset'], true);
        if (
            $phpMussel['ThisAsset'] &&
            is_readable($phpMussel['ThisAsset']) &&
            ($phpMussel['ThisAssetDel'] = strrpos($phpMussel['ThisAsset'], '.')) !== false
        ) {
            $phpMussel['ThisAssetType'] = strtolower(substr($phpMussel['ThisAsset'], $phpMussel['ThisAssetDel'] + 1));
            if ($phpMussel['ThisAssetType'] === 'jpeg') {
                $phpMussel['ThisAssetType'] = 'jpg';
            }
            if (preg_match('/^(gif|jpg|png|webp)$/', $phpMussel['ThisAssetType'])) {
                /** Set asset mime-type (images). */
                header('Content-Type: image/' . $phpMussel['ThisAssetType']);
                $phpMussel['Success'] = true;
            } elseif ($phpMussel['ThisAssetType'] === 'js') {
                /** Set asset mime-type (JavaScript). */
                header('Content-Type: text/javascript');
                $phpMussel['Success'] = true;
            }
            if ($phpMussel['Success']) {
                if (!empty($phpMussel['QueryVars']['theme'])) {
                    /** Prevents needlessly reloading static assets. */
                    header('Last-Modified: ' . gmdate('D, d M Y H:i:s T', filemtime($phpMussel['ThisAsset'])));
                }
                /** Send asset data. */
                echo $phpMussel['ReadFile']($phpMussel['ThisAsset']);
            }
        }
    }

    if ($phpMussel['Success']) {
        die;
    }

    /** Cleanup. */
    unset($phpMussel['ThisAssetType'], $phpMussel['ThisAssetDel'], $phpMussel['ThisAsset'], $phpMussel['Success']);
}

/** A simple passthru for the front-end CSS. */
if ($phpMussel['QueryVars']['phpmussel-page'] === 'css') {
    header('Content-Type: text/css');
    echo $phpMussel['ParseVars'](
        $phpMussel['L10N']->Data + $phpMussel['FE'],
        $phpMussel['ReadFile']($phpMussel['GetAssetPath']('frontend.css'))
    );
    die;
}

/** A simple passthru for the favicon. */
if ($phpMussel['QueryVars']['phpmussel-page'] === 'favicon') {
    header('Content-Type: image/png');
    echo base64_decode($phpMussel['favicon']);
    die;
}

/** Set the current request's form target. */
$phpMussel['FE']['FormTarget'] = $_POST['phpmussel-form-target'] ?? '';

/** Used by a safety mechanism against a potential attack vector. */
$phpMussel['frontend.dat.safety'] = file_exists($phpMussel['Vault'] . 'fe_assets/frontend.dat.safety');

/** Fetch user list, sessions list, and the front-end cache, or rebuild it if it doesn't exist. */
if ($phpMussel['FE']['FrontEndData'] = $phpMussel['ReadFile']($phpMussel['Vault'] . 'fe_assets/frontend.dat')) {
    $phpMussel['FE']['Rebuild'] = false;
} else {
    if ($phpMussel['frontend.dat.safety']) {
        header('Content-Type: text/plain');
        die('[phpMussel] ' . $phpMussel['L10N']->getString('security_warning'));
    }
    $phpMussel['FE']['FrontEndData'] = "USERS\n-----\nYWRtaW4=," . $phpMussel['FE']['DefaultPassword'] . ",1\n\nSESSIONS\n--------\n\nCACHE\n-----\n";
    $phpMussel['FE']['Rebuild'] = true;
}

/** Engage safety mechanism. */
if (!$phpMussel['frontend.dat.safety']) {
    $phpMussel['Handle'] = fopen($phpMussel['Vault'] . 'fe_assets/frontend.dat.safety', 'wb');
    fwrite($phpMussel['Handle'], '.');
    fclose($phpMussel['Handle']);
}

$phpMussel['FE']['UserListPos'] = strpos($phpMussel['FE']['FrontEndData'], "USERS\n-----\n");
$phpMussel['FE']['SessionListPos'] = strpos($phpMussel['FE']['FrontEndData'], "SESSIONS\n--------\n");
$phpMussel['FE']['CachePos'] = strpos($phpMussel['FE']['FrontEndData'], "CACHE\n-----\n");
if ($phpMussel['FE']['UserListPos'] !== false) {
    $phpMussel['FE']['UserList'] = substr(
        $phpMussel['FE']['FrontEndData'],
        $phpMussel['FE']['UserListPos'] + 11,
        $phpMussel['FE']['SessionListPos'] - $phpMussel['FE']['UserListPos'] - 12
    );
}
if ($phpMussel['FE']['SessionListPos'] !== false) {
    $phpMussel['FE']['SessionList'] = substr(
        $phpMussel['FE']['FrontEndData'],
        $phpMussel['FE']['SessionListPos'] + 17,
        $phpMussel['FE']['CachePos'] - $phpMussel['FE']['SessionListPos'] - 18
    );
}
if ($phpMussel['FE']['CachePos'] !== false) {
    $phpMussel['FE']['Cache'] = substr(
        $phpMussel['FE']['FrontEndData'],
        $phpMussel['FE']['CachePos'] + 11
    );
}

/** Clear expired sessions. */
$phpMussel['ClearExpired']($phpMussel['FE']['SessionList'], $phpMussel['FE']['Rebuild']);

/** Clear expired cache entries. */
$phpMussel['ClearExpired']($phpMussel['FE']['Cache'], $phpMussel['FE']['Rebuild']);

/** Initialise cache. */
$phpMussel['InitialiseCache']();

/** Brute-force security check. */
if (($phpMussel['LoginAttempts'] = (int)$phpMussel['FECacheGet'](
    $phpMussel['FE']['Cache'],
    'LoginAttempts' . $phpMussel['IPAddr']
)) && ($phpMussel['LoginAttempts'] >= $phpMussel['Config']['general']['max_login_attempts'])) {
    header('Content-Type: text/plain');
    die('[phpMussel] ' . $phpMussel['L10N']->getString('max_login_attempts_exceeded'));
}

/** Brute-force security check (2FA). */
if (($phpMussel['Failed2FA'] = (int)$phpMussel['FECacheGet'](
    $phpMussel['FE']['Cache'],
    'Failed2FA' . $phpMussel['IPAddr']
)) && ($phpMussel['Failed2FA'] >= $phpMussel['Config']['general']['max_login_attempts'])) {
    header('Content-Type: text/plain');
    die('[phpMussel] ' . $phpMussel['L10N']->getString('max_login_attempts_exceeded'));
}

/** Attempt to log in the user. */
if ($phpMussel['FE']['FormTarget'] === 'login' || $phpMussel['FE']['CronMode'] !== '') {
    if (!empty($_POST['username']) && empty($_POST['password'])) {
        $phpMussel['FE']['UserState'] = -1;
        $phpMussel['FE']['state_msg'] = $phpMussel['L10N']->getString('response_login_password_field_empty');
    } elseif (empty($_POST['username']) && !empty($_POST['password'])) {
        $phpMussel['FE']['UserState'] = -1;
        $phpMussel['FE']['state_msg'] = $phpMussel['L10N']->getString('response_login_username_field_empty');
    } elseif (!empty($_POST['username']) && !empty($_POST['password'])) {
        $phpMussel['FE']['UserState'] = -1;
        $phpMussel['FE']['UserRaw'] = $_POST['username'];
        $phpMussel['FE']['User'] = base64_encode($phpMussel['FE']['UserRaw']);
        $phpMussel['FE']['UserPos'] = strpos($phpMussel['FE']['UserList'], "\n" . $phpMussel['FE']['User'] . ',');

        if ($phpMussel['FE']['UserPos'] !== false) {
            $phpMussel['FE']['UserOffset'] = $phpMussel['FE']['UserPos'] + strlen($phpMussel['FE']['User']) + 2;
            $phpMussel['FE']['Password'] = substr(
                $phpMussel['FE']['UserList'],
                $phpMussel['FE']['UserOffset'],
                strpos($phpMussel['FE']['UserList'], "\n", $phpMussel['FE']['UserOffset']) - $phpMussel['FE']['UserOffset']
            );
            $phpMussel['FE']['Permissions'] = (int)substr($phpMussel['FE']['Password'], -1);
            $phpMussel['FE']['Password'] = substr($phpMussel['FE']['Password'], 0, -2);
            if (password_verify($_POST['password'], $phpMussel['FE']['Password'])) {
                $phpMussel['FECacheRemove'](
                    $phpMussel['FE']['Cache'],
                    $phpMussel['FE']['Rebuild'],
                    'LoginAttempts' . $phpMussel['IPAddr']
                );
                if (($phpMussel['FE']['Permissions'] === 3 && (
                    $phpMussel['FE']['CronMode'] === '' || substr($phpMussel['FE']['UA'], 0, 10) !== 'Cronable v'
                )) || !($phpMussel['FE']['Permissions'] > 0 && $phpMussel['FE']['Permissions'] <= 3)) {
                    $phpMussel['FE']['Permissions'] = 0;
                    $phpMussel['FE']['state_msg'] = $phpMussel['L10N']->getString('response_login_wrong_endpoint');
                } else {
                    if ($phpMussel['FE']['CronMode'] === '') {
                        $phpMussel['FE']['SessionKey'] = hash('md5', $phpMussel['GenerateSalt']());
                        $phpMussel['FE']['Cookie'] = $_POST['username'] . $phpMussel['FE']['SessionKey'];
                        setcookie('PHPMUSSEL-ADMIN', $phpMussel['FE']['Cookie'], $phpMussel['Time'] + 604800, '/', $phpMussel['HostnameOverride'] ?: $phpMussel['HTTP_HOST'], false, true);
                        $phpMussel['FE']['ThisSession'] = $phpMussel['FE']['User'] . ',' . password_hash(
                            $phpMussel['FE']['SessionKey'],
                            $phpMussel['DefaultAlgo']
                        ) . ',' . ($phpMussel['Time'] + 604800) . "\n";
                        $phpMussel['FE']['SessionList'] .= $phpMussel['FE']['ThisSession'];

                        /** Prepare 2FA email. */
                        if ($phpMussel['Config']['PHPMailer']['enable_two_factor'] && preg_match('~^.+@.+$~', $phpMussel['FE']['UserRaw'])) {
                            $phpMussel['2FA-State'] = ['Number' => $phpMussel['2FA-Number']()];
                            $phpMussel['2FA-State']['Hash'] = password_hash($phpMussel['2FA-State']['Number'], $phpMussel['DefaultAlgo']);
                            $phpMussel['FECacheAdd'](
                                $phpMussel['FE']['Cache'],
                                $phpMussel['FE']['Rebuild'],
                                '2FA-State:' . $phpMussel['FE']['Cookie'],
                                '0' . $phpMussel['2FA-State']['Hash'],
                                $phpMussel['Time'] + 600
                            );
                            $phpMussel['2FA-State']['Template'] = sprintf(
                                $phpMussel['L10N']->getString('msg_template_2fa'),
                                $phpMussel['FE']['UserRaw'],
                                $phpMussel['2FA-State']['Number']
                            );
                            if (preg_match('~^[^<>]+<[^<>]+>$~', $phpMussel['FE']['UserRaw'])) {
                                $phpMussel['2FA-State']['Name'] = trim(preg_replace('~^([^<>]+)<[^<>]+>$~', '\1', $phpMussel['FE']['UserRaw']));
                                $phpMussel['2FA-State']['Address'] = trim(preg_replace('~^[^<>]+<([^<>]+)>$~', '\1', $phpMussel['FE']['UserRaw']));
                            } else {
                                $phpMussel['2FA-State']['Name'] = trim($phpMussel['FE']['UserRaw']);
                                $phpMussel['2FA-State']['Address'] = $phpMussel['2FA-State']['Name'];
                            }
                            $phpMussel['SendEmail'](
                                [['Name' => $phpMussel['2FA-State']['Name'], 'Address' => $phpMussel['2FA-State']['Address']]],
                                $phpMussel['L10N']->getString('msg_subject_2fa'),
                                $phpMussel['2FA-State']['Template'],
                                strip_tags($phpMussel['2FA-State']['Template'])
                            );
                            $phpMussel['FE']['UserState'] = 2;
                            unset($phpMussel['2FA-State']);
                        } else {
                            $phpMussel['FE']['UserState'] = 1;
                        }
                    } else {
                        $phpMussel['FE']['UserState'] = 1;
                    }
                    if ($phpMussel['FE']['UserState'] !== 1) {
                        $phpMussel['FE']['Permissions'] = 0;
                    }
                    $phpMussel['FE']['Rebuild'] = true;
                }
            } else {
                $phpMussel['FE']['Permissions'] = 0;
                $phpMussel['FE']['state_msg'] = $phpMussel['L10N']->getString('response_login_invalid_password');
            }
        } else {
            $phpMussel['FE']['state_msg'] = $phpMussel['L10N']->getString('response_login_invalid_username');
        }
    }

    if ($phpMussel['FE']['state_msg']) {
        $phpMussel['LoginAttempts']++;
        $phpMussel['TimeToAdd'] = ($phpMussel['LoginAttempts'] > 4) ? ($phpMussel['LoginAttempts'] - 4) * 86400 : 86400;
        $phpMussel['FECacheAdd'](
            $phpMussel['FE']['Cache'],
            $phpMussel['FE']['Rebuild'],
            'LoginAttempts' . $phpMussel['IPAddr'],
            $phpMussel['LoginAttempts'],
            $phpMussel['Time'] + $phpMussel['TimeToAdd']
        );
        if ($phpMussel['Config']['general']['frontend_log']) {
            $phpMussel['LoggerMessage'] = $phpMussel['FE']['state_msg'];
        }
        if ($phpMussel['FE']['CronMode'] === '') {
            $phpMussel['FE']['state_msg'] = '<div class="txtRd">' . $phpMussel['FE']['state_msg'] . '<br /><br /></div>';
        }
    } elseif ($phpMussel['Config']['general']['frontend_log']) {
        $phpMussel['LoggerMessage'] = $phpMussel['L10N']->getString((
            $phpMussel['Config']['PHPMailer']['enable_two_factor'] &&
            $phpMussel['FE']['Permissions'] === 0
        ) ? 'state_logged_in_2fa_pending' : 'state_logged_in');
    }

    /** Safer for the front-end logger. */
    $phpMussel['NameToLog'] = preg_replace('~[\x00-\x1F]~', '', $_POST['username'] ?? '');

    /** Handle front-end logging. */
    $phpMussel['FELogger'](
        $phpMussel['IPAddr'],
        $phpMussel['NameToLog'],
        $phpMussel['LoggerMessage'] ?? ''
    );

    /** Cleanup. */
    unset($phpMussel['NameToLog'], $phpMussel['LoggerMessage']);
}

/** Determine whether the user has logged in. */
elseif (!empty($_COOKIE['PHPMUSSEL-ADMIN'])) {
    $phpMussel['FE']['UserState'] = -1;
    $phpMussel['FE']['SessionKey'] = substr($_COOKIE['PHPMUSSEL-ADMIN'], -32);
    $phpMussel['FE']['UserRaw'] = substr($_COOKIE['PHPMUSSEL-ADMIN'], 0, -32);
    $phpMussel['FE']['User'] = base64_encode($phpMussel['FE']['UserRaw']);
    $phpMussel['FE']['SessionOffset'] = 0;

    if (!empty($phpMussel['FE']['SessionKey']) && !empty($phpMussel['FE']['User'])) {
        $phpMussel['FE']['UserLen'] = strlen($phpMussel['FE']['User']);
        while (($phpMussel['FE']['SessionPos'] = strpos(
            $phpMussel['FE']['SessionList'],
            "\n" . $phpMussel['FE']['User'],
            $phpMussel['FE']['SessionOffset']
        )) !== false) {
            $phpMussel['FE']['SessionOffset'] = $phpMussel['FE']['SessionPos'] + $phpMussel['FE']['UserLen'] + 2;
            $phpMussel['FE']['SessionEntry'] = substr(
                $phpMussel['FE']['SessionList'],
                $phpMussel['FE']['SessionOffset'],
                $phpMussel['ZeroMin'](strpos(
                    $phpMussel['FE']['SessionList'],
                    "\n",
                    $phpMussel['FE']['SessionOffset']
                ), $phpMussel['FE']['SessionOffset'] * -1)
            );
            $phpMussel['FE']['SEDelimiter'] = strrpos($phpMussel['FE']['SessionEntry'], ',');
            if ($phpMussel['FE']['SEDelimiter'] !== false) {
                $phpMussel['FE']['Expiry'] = (int)substr($phpMussel['FE']['SessionEntry'], $phpMussel['FE']['SEDelimiter'] + 1);
                $phpMussel['FE']['UserHash'] = substr($phpMussel['FE']['SessionEntry'], 0, $phpMussel['FE']['SEDelimiter']);
            }
            if (
                !empty($phpMussel['FE']['Expiry']) &&
                !empty($phpMussel['FE']['UserHash']) &&
                ($phpMussel['FE']['Expiry'] > $phpMussel['Time']) &&
                password_verify($phpMussel['FE']['SessionKey'], $phpMussel['FE']['UserHash'])
            ) {
                $phpMussel['FE']['UserPos'] = strpos($phpMussel['FE']['UserList'], "\n" . $phpMussel['FE']['User'] . ',');
                if ($phpMussel['FE']['UserPos'] !== false) {
                    $phpMussel['FE']['ThisSession'] = $phpMussel['FE']['User'] . ',' . $phpMussel['FE']['SessionEntry'] . "\n";
                    $phpMussel['FE']['UserOffset'] = $phpMussel['FE']['UserPos'] + $phpMussel['FE']['UserLen'] + 2;
                    $phpMussel['FE']['Permissions'] = (int)substr(substr(
                        $phpMussel['FE']['UserList'],
                        $phpMussel['FE']['UserOffset'],
                        strpos($phpMussel['FE']['UserList'], "\n", $phpMussel['FE']['UserOffset']) - $phpMussel['FE']['UserOffset']
                    ), -1);

                    /** Handle 2FA stuff here. */
                    if ($phpMussel['Config']['PHPMailer']['enable_two_factor'] && preg_match('~^.+@.+$~', $phpMussel['FE']['UserRaw'])) {
                        $phpMussel['2FA-State'] = $phpMussel['FECacheGet'](
                            $phpMussel['FE']['Cache'],
                            '2FA-State:' . $_COOKIE['PHPMUSSEL-ADMIN']
                        );
                        $phpMussel['FE']['UserState'] = ((int)$phpMussel['2FA-State'] === 1) ? 1 : 2;
                        if ($phpMussel['FE']['UserState'] === 2 && $phpMussel['FE']['FormTarget'] === '2fa' && !empty($_POST['2fa'])) {
                            /** User has submitted a 2FA code. Attempt to verify it. */
                            if (password_verify($_POST['2fa'], substr($phpMussel['2FA-State'], 1))) {
                                $phpMussel['FECacheAdd'](
                                    $phpMussel['FE']['Cache'],
                                    $phpMussel['FE']['Rebuild'],
                                    '2FA-State:' . $_COOKIE['PHPMUSSEL-ADMIN'],
                                    '1',
                                    $phpMussel['Time'] + 604800
                                );
                                $phpMussel['FE']['UserState'] = 1;
                            }
                        }
                        unset($phpMussel['2FA-State']);
                    } else {
                        $phpMussel['FE']['UserState'] = 1;
                    }

                    /** Revert permissions if not authenticated. */
                    if ($phpMussel['FE']['UserState'] !== 1) {
                        $phpMussel['FE']['Permissions'] = 0;
                    }
                }
                break;
            }
        }
    }

    /** In case of 2FA form submission. */
    if ($phpMussel['FE']['FormTarget'] === '2fa' && !empty($_POST['2fa'])) {
        if ($phpMussel['FE']['UserState'] === 2) {
            $phpMussel['Failed2FA']++;
            $phpMussel['TimeToAdd'] = ($phpMussel['Failed2FA'] > 4) ? ($phpMussel['Failed2FA'] - 4) * 86400 : 86400;
            $phpMussel['FECacheAdd'](
                $phpMussel['FE']['Cache'],
                $phpMussel['FE']['Rebuild'],
                'Failed2FA' . $phpMussel['IPAddr'],
                $phpMussel['Failed2FA'],
                $phpMussel['Time'] + $phpMussel['TimeToAdd']
            );
            if ($phpMussel['Config']['general']['frontend_log']) {
                $phpMussel['FELogger']($phpMussel['IPAddr'], $phpMussel['FE']['UserRaw'], $phpMussel['L10N']->getString('response_2fa_invalid'));
            }
            $phpMussel['FE']['state_msg'] = '<div class="txtRd">' . $phpMussel['L10N']->getString('response_2fa_invalid') . '<br /><br /></div>';
        } else {
            $phpMussel['FECacheRemove'](
                $phpMussel['FE']['Cache'],
                $phpMussel['FE']['Rebuild'],
                'Failed2FA' . $phpMussel['IPAddr']
            );
            if ($phpMussel['Config']['general']['frontend_log']) {
                $phpMussel['FELogger']($phpMussel['IPAddr'], $phpMussel['FE']['UserRaw'], $phpMussel['L10N']->getString('response_2fa_valid'));
            }
        }
    }
}

/** The user is attempting an asynchronous request without adequate permissions. */
if ($phpMussel['FE']['UserState'] !== 1 && $phpMussel['FE']['ASYNC']) {
    header('HTTP/1.0 403 Forbidden');
    header('HTTP/1.1 403 Forbidden');
    header('Status: 403 Forbidden');
    die($phpMussel['L10N']->getString('state_async_deny'));
}

/** Major version notice. */
$phpMussel['MajorVersionNotice'] = '';

/** Only execute this code block for users that are logged in or awaiting two-factor authentication. */
if (($phpMussel['FE']['UserState'] === 1 || $phpMussel['FE']['UserState'] === 2) && $phpMussel['FE']['CronMode'] === '') {
    /** Log out the user. */
    if ($phpMussel['QueryVars']['phpmussel-page'] === 'logout') {
        $phpMussel['FE']['SessionList'] = str_ireplace($phpMussel['FE']['ThisSession'], '', $phpMussel['FE']['SessionList']);
        $phpMussel['FE']['ThisSession'] = '';
        $phpMussel['FE']['Rebuild'] = true;
        $phpMussel['FE']['UserState'] = 0;
        $phpMussel['FE']['Permissions'] = 0;
        setcookie('PHPMUSSEL-ADMIN', '', -1, '/', $phpMussel['HostnameOverride'] ?: $phpMussel['HTTP_HOST'], false, true);
        $phpMussel['FECacheRemove']($phpMussel['FE']['Cache'], $phpMussel['FE']['Rebuild'], '2FA-State:' . $_COOKIE['PHPMUSSEL-ADMIN']);
        $phpMussel['FELogger']($phpMussel['IPAddr'], $phpMussel['FE']['UserRaw'], $phpMussel['L10N']->getString('state_logged_out'));
    }

    if ($phpMussel['FE']['Permissions'] === 1) {
        /** If the user has complete access. */
        $phpMussel['FE']['nav'] = $phpMussel['ParseVars'](
            $phpMussel['L10N']->Data + $phpMussel['FE'],
            $phpMussel['ReadFile']($phpMussel['GetAssetPath']('_nav_complete_access.html'))
        );
    } elseif ($phpMussel['FE']['Permissions'] === 2) {
        /** If the user has logs access only. */
        $phpMussel['FE']['nav'] = $phpMussel['ParseVars'](
            $phpMussel['L10N']->Data + $phpMussel['FE'],
            $phpMussel['ReadFile']($phpMussel['GetAssetPath']('_nav_logs_access_only.html'))
        );
    }
}

/** Only execute this code block for already logged in users. */
if ($phpMussel['FE']['UserState'] === 1) {
    /** Where to find remote version information? */
    $phpMussel['RemoteVerPath'] = 'https://raw.githubusercontent.com/Maikuolan/Compatibility-Charts/gh-pages/';

    /** Fetch remote phpMussel version information and cache it if necessary. */
    if (($phpMussel['Remote-YAML-phpMussel'] = $phpMussel['FECacheGet']($phpMussel['FE']['Cache'], 'phpmussel-ver.yaml')) === false) {
        $phpMussel['Remote-YAML-phpMussel'] = $phpMussel['Request']($phpMussel['RemoteVerPath'] . 'phpmussel-ver.yaml', [], 8);
        $phpMussel['FECacheAdd']($phpMussel['FE']['Cache'], $phpMussel['FE']['Rebuild'], 'phpmussel-ver.yaml', $phpMussel['Remote-YAML-phpMussel'] ?: '-', $phpMussel['Time'] + 86400);
    }

    /** Process remote phpMussel version information. */
    if (empty($phpMussel['Remote-YAML-phpMussel'])) {
        /** phpMussel latest stable. */
        $phpMussel['FE']['info_phpmussel_stable'] = $phpMussel['L10N']->getString('response_error');

        /** phpMussel latest unstable. */
        $phpMussel['FE']['info_phpmussel_unstable'] = $phpMussel['L10N']->getString('response_error');

        /** phpMussel branch latest stable. */
        $phpMussel['FE']['info_phpmussel_branch'] = $phpMussel['L10N']->getString('response_error');
    } else {
        $phpMussel['Remote-YAML-phpMussel-Array'] = [];
        $phpMussel['YAML']->process($phpMussel['Remote-YAML-phpMussel'], $phpMussel['Remote-YAML-phpMussel-Array']);

        /** phpMussel latest stable. */
        if (empty($phpMussel['Remote-YAML-phpMussel-Array']['Stable'])) {
            $phpMussel['FE']['info_phpmussel_stable'] = $phpMussel['L10N']->getString('response_error');
        } else {
            $phpMussel['FE']['MajorVersionCurrent'] = (int)substr(
                $phpMussel['ScriptVersion'],
                0,
                strpos($phpMussel['ScriptVersion'], '.') ?: strlen($phpMussel['ScriptVersion'])
            );
            $phpMussel['FE']['MajorVersionLatest'] = (int)substr(
                $phpMussel['Remote-YAML-phpMussel-Array']['Stable'],
                0,
                strpos($phpMussel['Remote-YAML-phpMussel-Array']['Stable'], '.') ?: strlen($phpMussel['Remote-YAML-phpMussel-Array']['Stable'])
            );
            if (
                $phpMussel['FE']['MajorVersionCurrent'] < $phpMussel['FE']['MajorVersionLatest'] &&
                !empty($phpMussel['Remote-YAML-phpMussel-Array']['Stable Minimum PHP Required']) &&
                is_string($phpMussel['Remote-YAML-phpMussel-Array']['Stable Minimum PHP Required']) &&
                version_compare(PHP_VERSION, $phpMussel['Remote-YAML-phpMussel-Array']['Stable Minimum PHP Required'], '>=')
            ) {
                $phpMussel['MajorVersionNotice'] = sprintf(
                    $phpMussel['L10N']->getString('notice_new_major_version'),
                    'phpMussel v' . $phpMussel['Remote-YAML-phpMussel-Array']['Stable'],
                    $phpMussel['ScriptIdent']
                );
            }
            $phpMussel['FE']['info_phpmussel_stable'] = $phpMussel['Remote-YAML-phpMussel-Array']['Stable'];
        }

        /** phpMussel latest unstable. */
        $phpMussel['FE']['info_phpmussel_unstable'] = empty($phpMussel['Remote-YAML-phpMussel-Array']['Unstable']) ?
            $phpMussel['L10N']->getString('response_error') : $phpMussel['Remote-YAML-phpMussel-Array']['Unstable'];

        /** phpMussel branch latest stable. */
        if ($phpMussel['ThisBranch'] = substr($phpMussel['ScriptVersion'], 0, strpos($phpMussel['ScriptVersion'], '.') ?: 1)) {
            $phpMussel['ThisBranch'] = 'v' . ($phpMussel['ThisBranch'] ?: 1);
            if (empty($phpMussel['Remote-YAML-phpMussel-Array']['Branch'][$phpMussel['ThisBranch']]['Latest'])) {
                $phpMussel['FE']['info_phpmussel_branch'] = $phpMussel['L10N']->getString('response_error');
            } else {
                $phpMussel['FE']['info_phpmussel_branch'] = $phpMussel['Remote-YAML-phpMussel-Array']['Branch'][$phpMussel['ThisBranch']]['Latest'];
            }
        } else {
            $phpMussel['FE']['info_php_branch'] = $phpMussel['L10N']->getString('response_error');
        }
    }

    /** Cleanup. */
    unset($phpMussel['Remote-YAML-phpMussel-Array'], $phpMussel['Remote-YAML-phpMussel']);

    /** Fetch remote PHP version information and cache it if necessary. */
    if (($phpMussel['Remote-YAML-PHP'] = $phpMussel['FECacheGet']($phpMussel['FE']['Cache'], 'php-ver.yaml')) === false) {
        $phpMussel['Remote-YAML-PHP'] = $phpMussel['Request']($phpMussel['RemoteVerPath'] . 'php-ver.yaml', [], 8);
        $phpMussel['FECacheAdd']($phpMussel['FE']['Cache'], $phpMussel['FE']['Rebuild'], 'php-ver.yaml', $phpMussel['Remote-YAML-PHP'] ?: '-', $phpMussel['Time'] + 86400);
    }

    /** Process remote PHP version information. */
    if (empty($phpMussel['Remote-YAML-PHP'])) {
        /** PHP latest stable. */
        $phpMussel['FE']['info_php_stable'] = $phpMussel['L10N']->getString('response_error');

        /** PHP latest unstable. */
        $phpMussel['FE']['info_php_unstable'] = $phpMussel['L10N']->getString('response_error');

        /** PHP branch latest stable. */
        $phpMussel['FE']['info_php_branch'] = $phpMussel['L10N']->getString('response_error');
    } else {
        $phpMussel['Remote-YAML-PHP-Array'] = [];
        $phpMussel['YAML']->process($phpMussel['Remote-YAML-PHP'], $phpMussel['Remote-YAML-PHP-Array']);

        /** PHP latest stable. */
        $phpMussel['FE']['info_php_stable'] = empty($phpMussel['Remote-YAML-PHP-Array']['Stable']) ?
            $phpMussel['L10N']->getString('response_error') : $phpMussel['Remote-YAML-PHP-Array']['Stable'];

        /** PHP latest unstable. */
        $phpMussel['FE']['info_php_unstable'] = empty($phpMussel['Remote-YAML-PHP-Array']['Unstable']) ?
            $phpMussel['L10N']->getString('response_error') : $phpMussel['Remote-YAML-PHP-Array']['Unstable'];

        /** PHP branch latest stable. */
        if ($phpMussel['ThisBranch'] = substr(PHP_VERSION, 0, strpos(PHP_VERSION, '.') ?: 0)) {
            $phpMussel['ThisBranch'] .= substr(PHP_VERSION, strlen($phpMussel['ThisBranch']) + 1, strpos(PHP_VERSION, '.', strlen($phpMussel['ThisBranch'])) ?: 0);
            $phpMussel['ThisBranch'] = 'php' . $phpMussel['ThisBranch'];
            $phpMussel['FE']['info_php_branch'] = empty($phpMussel['Remote-YAML-PHP-Array']['Branch'][$phpMussel['ThisBranch']]['Latest']) ?
                $phpMussel['L10N']->getString('response_error') : $phpMussel['Remote-YAML-PHP-Array']['Branch'][$phpMussel['ThisBranch']]['Latest'];
        } else {
            $phpMussel['FE']['info_php_branch'] = $phpMussel['L10N']->getString('response_error');
        }
    }

    /** Cleanup. */
    unset($phpMussel['Remote-YAML-PHP-Array'], $phpMussel['Remote-YAML-PHP'], $phpMussel['ThisBranch'], $phpMussel['RemoteVerPath']);
}

/** The user hasn't logged in, or hasn't authenticated yet. */
if ($phpMussel['FE']['UserState'] !== 1 && $phpMussel['FE']['CronMode'] === '') {
    /** Page initial prepwork. */
    $phpMussel['InitialPrepwork']($phpMussel['L10N']->getString('title_login'), '', false);

    /** Hide warnings from non-logged in users. */
    $phpMussel['FE']['Warnings'] = '';

    if ($phpMussel['FE']['UserState'] === 2) {
        /** Provide the option to log out (omit home link). */
        $phpMussel['FE']['bNav'] = $phpMussel['FE']['LogoutButton'];

        /** Aesthetic spacer. */
        $phpMussel['FE']['2fa_status_spacer'] = empty($phpMussel['FE']['state_msg']) ? '' : '<br /><br />';

        /** Show them the two-factor authentication page. */
        $phpMussel['FE']['FE_Content'] = $phpMussel['ParseVars'](
            $phpMussel['L10N']->Data + $phpMussel['FE'],
            $phpMussel['ReadFile']($phpMussel['GetAssetPath']('_2fa.html'))
        );
    } else {
        /** Omit the log out and home links. */
        $phpMussel['FE']['bNav'] = '';

        /** Show them the login page. */
        $phpMussel['FE']['FE_Content'] = $phpMussel['ParseVars'](
            $phpMussel['L10N']->Data + $phpMussel['FE'],
            $phpMussel['ReadFile']($phpMussel['GetAssetPath']('_login.html'))
        );
    }

    /** Send output. */
    echo $phpMussel['SendOutput']();
}

/**
 * The user has logged in, but hasn't selected anything to view. Show them the
 * front-end home page.
 */
elseif ($phpMussel['QueryVars']['phpmussel-page'] === '' && $phpMussel['FE']['CronMode'] === '') {
    /** Page initial prepwork. */
    $phpMussel['InitialPrepwork']($phpMussel['L10N']->getString('link_home'), $phpMussel['L10N']->getString('tip_home'), false);

    /** phpMussel version used. */
    $phpMussel['FE']['ScriptVersion'] = $phpMussel['ScriptVersion'];

    /** PHP version used. */
    $phpMussel['FE']['info_php'] = PHP_VERSION;

    /** SAPI used. */
    $phpMussel['FE']['info_sapi'] = php_sapi_name();

    /** Operating system used. */
    $phpMussel['FE']['info_os'] = php_uname();

    /** Provide the option to log out (omit home link). */
    $phpMussel['FE']['bNav'] = $phpMussel['FE']['LogoutButton'];

    /** Extension availability. */
    $phpMussel['FE']['Extensions'] = [];
    $phpMussel['FE']['ExtensionsCopyData'] = '';
    foreach ([
        ['Lib' => 'pcre', 'Name' => 'PCRE'],
        ['Lib' => 'curl', 'Name' => 'cURL'],
        ['Lib' => 'apcu', 'Name' => 'APCu'],
        ['Lib' => 'memcached', 'Name' => 'Memcached'],
        ['Lib' => 'redis', 'Name' => 'Redis'],
        ['Lib' => 'pdo', 'Name' => 'PDO', 'Drivers' => (class_exists('\PDO') ? \PDO::getAvailableDrivers() : [])],
        ['Lib' => 'bz2', 'Name' => 'Bz2'],
        ['Lib' => 'lzf', 'Name' => 'Lzf'],
        ['Lib' => 'rar', 'Name' => 'Rar'],
        ['Lib' => 'zip', 'Name' => 'Zip']
    ] as $phpMussel['ThisExtension']) {
        if (extension_loaded($phpMussel['ThisExtension']['Lib'])) {
            $phpMussel['ExtVer'] = (new \ReflectionExtension($phpMussel['ThisExtension']['Lib']))->getVersion();
            $phpMussel['ThisResponse'] = $phpMussel['L10N']->getString('response_yes') . ' (' . $phpMussel['ExtVer'] . ')';
            if (!empty($phpMussel['ThisExtension']['Drivers'])) {
                $phpMussel['ThisResponse'] .= ', {' . implode(', ', $phpMussel['ThisExtension']['Drivers']) . '}';
            }
            $phpMussel['FE']['ExtensionsCopyData'] .= $phpMussel['LTRinRTF'](
                sprintf('- %s➡%s\n', $phpMussel['ThisExtension']['Name'], $phpMussel['ThisResponse'])
            );
            $phpMussel['ThisResponse'] = '<span class="txtGn">' . $phpMussel['ThisResponse'] . '</span>';
        } else {
            $phpMussel['FE']['ExtensionsCopyData'] .= $phpMussel['LTRinRTF'](
                sprintf('- %s➡%s\n', $phpMussel['ThisExtension']['Name'], $phpMussel['L10N']->getString('response_no'))
            );
            $phpMussel['ThisResponse'] = '<span class="txtRd">' . $phpMussel['L10N']->getString('response_no') . '</span>';
        }
        $phpMussel['FE']['Extensions'][] = '    <li><small>' . $phpMussel['LTRinRTF'](sprintf(
            '%s➡%s',
            $phpMussel['ThisExtension']['Name'],
            $phpMussel['ThisResponse']
        )) . '</small></li>';
    }
    $phpMussel['FE']['Extensions'] = implode("\n", $phpMussel['FE']['Extensions']);
    $phpMussel['FE']['ExtensionIsAvailable'] = $phpMussel['LTRinRTF'](
        $phpMussel['L10N']->getString('label_extension') . '➡' . $phpMussel['L10N']->getString('label_installed_available')
    );
    unset($phpMussel['ExtVer'], $phpMussel['ThisResponse'], $phpMussel['ThisExtension']);

    /** Build clipboard data. */
    $phpMussel['FE']['HomeCopyData'] = sprintf(
        '%1$s\n\n- %2$s %3$s\n- %4$s %5$s\n- %6$s %7$s\n- %8$s %9$s\n\n- %10$s %11$s\n- %4$s %12$s\n- %6$s %13$s\n- %8$s %14$s\n- %15$s %16$s\n\n%17$s\n%18$s',
        $phpMussel['L10N']->getString('label_sysinfo'),
        $phpMussel['L10N']->getString('label_phpmussel'),
        $phpMussel['FE']['ScriptVersion'],
        $phpMussel['L10N']->getString('label_branch'),
        $phpMussel['FE']['info_phpmussel_branch'],
        $phpMussel['L10N']->getString('label_stable'),
        $phpMussel['FE']['info_phpmussel_stable'],
        $phpMussel['L10N']->getString('label_unstable'),
        $phpMussel['FE']['info_phpmussel_unstable'],
        $phpMussel['L10N']->getString('label_php'),
        $phpMussel['FE']['info_php'],
        $phpMussel['FE']['info_php_branch'],
        $phpMussel['FE']['info_php_stable'],
        $phpMussel['FE']['info_php_unstable'],
        $phpMussel['L10N']->getString('label_sapi'),
        $phpMussel['FE']['info_sapi'],
        $phpMussel['FE']['ExtensionIsAvailable'],
        $phpMussel['FE']['ExtensionsCopyData']
    );

    /** Parse output. */
    $phpMussel['FE']['FE_Content'] = $phpMussel['ParseVars'](
        $phpMussel['L10N']->Data + $phpMussel['FE'],
        $phpMussel['ReadFile']($phpMussel['GetAssetPath']('_home.html'))
    ) . $phpMussel['MenuToggle'];

    /** Send output. */
    echo $phpMussel['SendOutput']();
}

/** A simple passthru for the file manager icons. */
elseif ($phpMussel['QueryVars']['phpmussel-page'] === 'icon' && $phpMussel['FE']['Permissions'] === 1) {
    if (
        !empty($phpMussel['QueryVars']['file']) &&
        $phpMussel['FileManager-PathSecurityCheck']($phpMussel['QueryVars']['file']) &&
        file_exists($phpMussel['Vault'] . $phpMussel['QueryVars']['file']) &&
        is_readable($phpMussel['Vault'] . $phpMussel['QueryVars']['file'])
    ) {
        header('Content-Type: image/x-icon');
        echo $phpMussel['ReadFile']($phpMussel['Vault'] . $phpMussel['QueryVars']['file']);
    } elseif (!empty($phpMussel['QueryVars']['icon'])) {
        $phpMussel['Icons_Handler_Path'] = $phpMussel['GetAssetPath']('icons.php');
        if (is_readable($phpMussel['Icons_Handler_Path'])) {
            /** Fetch file manager icons data. */
            require $phpMussel['Icons_Handler_Path'];

            /** Set mime-type. */
            header('Content-Type: image/gif');

            /** Prevents needlessly reloading static assets. */
            if (!empty($phpMussel['QueryVars']['theme'])) {
                header('Last-Modified: ' . gmdate('D, d M Y H:i:s T', filemtime($phpMussel['Icons_Handler_Path'])));
            }

            /** Send icon data. */
            if (!empty($phpMussel['Icons'][$phpMussel['QueryVars']['icon']])) {
                echo gzinflate(base64_decode($phpMussel['Icons'][$phpMussel['QueryVars']['icon']]));
            } elseif (!empty($phpMussel['Icons']['unknown'])) {
                echo gzinflate(base64_decode($phpMussel['Icons']['unknown']));
            }
        }
    }

    die;
}

/** Accounts. */
elseif ($phpMussel['QueryVars']['phpmussel-page'] === 'accounts' && $phpMussel['FE']['Permissions'] === 1) {
    /** $_POST overrides for mobile display. */
    if (!empty($_POST['username']) && !empty($_POST['do_mob']) && (!empty($_POST['password_mob']) || $_POST['do_mob'] === 'delete-account')) {
        $_POST['do'] = $_POST['do_mob'];
    }
    if (empty($_POST['username']) && !empty($_POST['username_mob'])) {
        $_POST['username'] = $_POST['username_mob'];
    }
    if (empty($_POST['permissions']) && !empty($_POST['permissions_mob'])) {
        $_POST['permissions'] = $_POST['permissions_mob'];
    }
    if (empty($_POST['password']) && !empty($_POST['password_mob'])) {
        $_POST['password'] = $_POST['password_mob'];
    }

    /** A form has been submitted. */
    if ($phpMussel['FE']['FormTarget'] === 'accounts' && !empty($_POST['do'])) {
        /** Create a new account. */
        if ($_POST['do'] === 'create-account' && !empty($_POST['username']) && !empty($_POST['password']) && !empty($_POST['permissions'])) {
            $phpMussel['FE']['NewUser'] = $_POST['username'];
            $phpMussel['FE']['NewPass'] = password_hash($_POST['password'], $phpMussel['DefaultAlgo']);
            $phpMussel['FE']['NewPerm'] = (int)$_POST['permissions'];
            $phpMussel['FE']['NewUserB64'] = base64_encode($_POST['username']);
            if (strpos($phpMussel['FE']['UserList'], "\n" . $phpMussel['FE']['NewUserB64'] . ',') !== false) {
                $phpMussel['FE']['state_msg'] = $phpMussel['L10N']->getString('response_accounts_already_exists');
            } else {
                $phpMussel['AccountsArray'] = [
                    'Iterate' => 0,
                    'Count' => 1,
                    'ByName' => [$phpMussel['FE']['NewUser'] =>
                        $phpMussel['FE']['NewUserB64'] . ',' .
                        $phpMussel['FE']['NewPass'] . ',' .
                        $phpMussel['FE']['NewPerm'] . "\n"
                    ]
                ];
                $phpMussel['FE']['NewLineOffset'] = 0;
                while (($phpMussel['FE']['NewLinePos'] = strpos(
                    $phpMussel['FE']['UserList'],
                    "\n",
                    $phpMussel['FE']['NewLineOffset'] + 1
                )) !== false) {
                    $phpMussel['FE']['NewLine'] = substr(
                        $phpMussel['FE']['UserList'],
                        $phpMussel['FE']['NewLineOffset'] + 1,
                        $phpMussel['FE']['NewLinePos'] - $phpMussel['FE']['NewLineOffset']
                    );
                    $phpMussel['RowInfo'] = explode(',', $phpMussel['FE']['NewLine'], 3);
                    $phpMussel['RowInfo'] = base64_decode($phpMussel['RowInfo'][0]);
                    $phpMussel['AccountsArray']['ByName'][$phpMussel['RowInfo']] = $phpMussel['FE']['NewLine'];
                    $phpMussel['FE']['NewLineOffset'] = $phpMussel['FE']['NewLinePos'];
                }
                ksort($phpMussel['AccountsArray']['ByName']);
                $phpMussel['FE']['UserList'] = "\n" . implode('', $phpMussel['AccountsArray']['ByName']);
                $phpMussel['FE']['Rebuild'] = true;
                unset($phpMussel['AccountsArray']);
                $phpMussel['FE']['state_msg'] = $phpMussel['L10N']->getString('response_accounts_created');
            }
        }

        /** Delete an account. */
        if ($_POST['do'] === 'delete-account' && !empty($_POST['username'])) {
            $phpMussel['FE']['User64'] = base64_encode($_POST['username']);
            $phpMussel['FE']['UserLinePos'] = strpos($phpMussel['FE']['UserList'], "\n" . $phpMussel['FE']['User64'] . ',');
            if ($phpMussel['FE']['UserLinePos'] === false) {
                $phpMussel['FE']['state_msg'] = $phpMussel['L10N']->getString('response_accounts_doesnt_exist');
            } else {
                $phpMussel['FE']['UserLineEndPos'] = strpos($phpMussel['FE']['UserList'], "\n", $phpMussel['FE']['UserLinePos'] + 1);
                if ($phpMussel['FE']['UserLineEndPos'] !== false) {
                    $phpMussel['FE']['UserLine'] = substr(
                        $phpMussel['FE']['UserList'],
                        $phpMussel['FE']['UserLinePos'] + 1,
                        $phpMussel['FE']['UserLineEndPos'] - $phpMussel['FE']['UserLinePos']
                    );
                    $phpMussel['FE']['UserList'] = str_replace($phpMussel['FE']['UserLine'], '', $phpMussel['FE']['UserList']);
                    $phpMussel['FE']['Rebuild'] = true;
                    $phpMussel['FE']['state_msg'] = $phpMussel['L10N']->getString('response_accounts_deleted');
                }
            }
            $phpMussel['FE']['UserLinePos'] = strpos($phpMussel['FE']['SessionList'], "\n" . $phpMussel['FE']['User64'] . ',');
            if ($phpMussel['FE']['UserLinePos'] !== false) {
                $phpMussel['FE']['UserLineEndPos'] = strpos($phpMussel['FE']['SessionList'], "\n", $phpMussel['FE']['UserLinePos'] + 1);
                if ($phpMussel['FE']['UserLineEndPos'] !== false) {
                    $phpMussel['FE']['SessionLine'] = substr(
                        $phpMussel['FE']['SessionList'],
                        $phpMussel['FE']['UserLinePos'] + 1,
                        $phpMussel['FE']['UserLineEndPos'] - $phpMussel['FE']['UserLinePos']
                    );
                    $phpMussel['FE']['SessionList'] = str_replace($phpMussel['FE']['SessionLine'], '', $phpMussel['FE']['SessionList']);
                    $phpMussel['FE']['Rebuild'] = true;
                }
            }
        }

        /** Update an account password. */
        if ($_POST['do'] === 'update-password' && !empty($_POST['username']) && !empty($_POST['password'])) {
            $phpMussel['FE']['User64'] = base64_encode($_POST['username']);
            $phpMussel['FE']['NewPass'] = password_hash($_POST['password'], $phpMussel['DefaultAlgo']);
            $phpMussel['FE']['UserLinePos'] = strpos($phpMussel['FE']['UserList'], "\n" . $phpMussel['FE']['User64'] . ',');
            if ($phpMussel['FE']['UserLinePos'] === false) {
                $phpMussel['FE']['state_msg'] = $phpMussel['L10N']->getString('response_accounts_doesnt_exist');
            } else {
                $phpMussel['FE']['UserLineEndPos'] = strpos($phpMussel['FE']['UserList'], "\n", $phpMussel['FE']['UserLinePos'] + 1);
                if ($phpMussel['FE']['UserLineEndPos'] !== false) {
                    $phpMussel['FE']['UserLine'] = substr(
                        $phpMussel['FE']['UserList'],
                        $phpMussel['FE']['UserLinePos'] + 1,
                        $phpMussel['FE']['UserLineEndPos'] - $phpMussel['FE']['UserLinePos']
                    );
                    $phpMussel['FE']['UserPerm'] = substr($phpMussel['FE']['UserLine'], -2, 1);
                    $phpMussel['FE']['NewUserLine'] =
                        $phpMussel['FE']['User64'] . ',' .
                        $phpMussel['FE']['NewPass'] . ',' .
                        $phpMussel['FE']['UserPerm'] . "\n";
                    $phpMussel['FE']['UserList'] = str_replace($phpMussel['FE']['UserLine'], $phpMussel['FE']['NewUserLine'], $phpMussel['FE']['UserList']);
                    $phpMussel['FE']['Rebuild'] = true;
                    $phpMussel['FE']['state_msg'] = $phpMussel['L10N']->getString('response_accounts_password_updated');
                }
            }
        }
    }

    if (!$phpMussel['FE']['ASYNC']) {
        /** Page initial prepwork. */
        $phpMussel['InitialPrepwork']($phpMussel['L10N']->getString('link_accounts'), $phpMussel['L10N']->getString('tip_accounts'));

        /** Append async globals. */
        $phpMussel['FE']['JS'] .= sprintf(
            'window[%3$s]=\'accounts\';function acc(e,d,i,t){var o=function(e){%4$se)' .
            '},a=function(){%4$s\'%1$s\')};window.username=%2$s(e).value,window.passw' .
            'ord=%2$s(d).value,window.do=%2$s(t).value,\'delete-account\'==window.do&' .
            '&$(\'POST\',\'\',[%3$s,\'username\',\'password\',\'do\'],a,function(e){%' .
            '4$se),hideid(i)},o),\'update-password\'==window.do&&$(\'POST\',\'\',[%3$' .
            's,\'username\',\'password\',\'do\'],a,o,o)}' . "\n",
            $phpMussel['L10N']->getString('state_loading'),
            'document.getElementById',
            "'phpmussel-form-target'",
            "w('stateMsg',"
        );

        $phpMussel['FE']['AccountsRow'] = $phpMussel['ReadFile']($phpMussel['GetAssetPath']('_accounts_row.html'));
        $phpMussel['FE']['Accounts'] = '';
        $phpMussel['FE']['NewLineOffset'] = 0;

        while (($phpMussel['FE']['NewLinePos'] = strpos(
            $phpMussel['FE']['UserList'],
            "\n",
            $phpMussel['FE']['NewLineOffset'] + 1
        )) !== false) {
            $phpMussel['FE']['NewLine'] = substr(
                $phpMussel['FE']['UserList'],
                $phpMussel['FE']['NewLineOffset'] + 1,
                $phpMussel['FE']['NewLinePos'] - $phpMussel['FE']['NewLineOffset'] - 1
            );
            $phpMussel['RowInfo'] = ['DelPos' => strpos($phpMussel['FE']['NewLine'], ','), 'AccWarnings' => ''];
            $phpMussel['RowInfo']['AccUsername'] = substr($phpMussel['FE']['NewLine'], 0, $phpMussel['RowInfo']['DelPos']);
            $phpMussel['RowInfo']['AccPassword'] = substr($phpMussel['FE']['NewLine'], $phpMussel['RowInfo']['DelPos'] + 1);
            $phpMussel['RowInfo']['AccPermissions'] = (int)substr($phpMussel['RowInfo']['AccPassword'], -1);
            if ($phpMussel['RowInfo']['AccPermissions'] === 1) {
                $phpMussel['RowInfo']['AccPermissions'] = $phpMussel['L10N']->getString('state_complete_access');
            } elseif ($phpMussel['RowInfo']['AccPermissions'] === 2) {
                $phpMussel['RowInfo']['AccPermissions'] = $phpMussel['L10N']->getString('state_logs_access_only');
            } elseif ($phpMussel['RowInfo']['AccPermissions'] === 3) {
                $phpMussel['RowInfo']['AccPermissions'] = 'Cronable';
            } else {
                $phpMussel['RowInfo']['AccPermissions'] = $phpMussel['L10N']->getString('response_error');
            }
            $phpMussel['RowInfo']['AccPassword'] = substr($phpMussel['RowInfo']['AccPassword'], 0, -2);

            /** Account password warnings. */
            if ($phpMussel['RowInfo']['AccPassword'] === $phpMussel['FE']['DefaultPassword']) {
                $phpMussel['RowInfo']['AccWarnings'] .= '<br /><div class="txtRd">' . $phpMussel['L10N']->getString('state_default_password') . '</div>';
            } elseif ((
                strlen($phpMussel['RowInfo']['AccPassword']) !== 60 &&
                strlen($phpMussel['RowInfo']['AccPassword']) !== 96 &&
                strlen($phpMussel['RowInfo']['AccPassword']) !== 97
            ) || (
                strlen($phpMussel['RowInfo']['AccPassword']) === 60 &&
                !preg_match('/^\$2.\$\d\d\$/', $phpMussel['RowInfo']['AccPassword'])
            ) || (
                strlen($phpMussel['RowInfo']['AccPassword']) === 96 &&
                !preg_match('/^\$argon2i\$/', $phpMussel['RowInfo']['AccPassword'])
            ) || (
                strlen($phpMussel['RowInfo']['AccPassword']) === 97 &&
                !preg_match('/^\$argon2id\$/', $phpMussel['RowInfo']['AccPassword'])
            )) {
                $phpMussel['RowInfo']['AccWarnings'] .= '<br /><div class="txtRd">' . $phpMussel['L10N']->getString('state_password_not_valid') . '</div>';
            }

            /** Logged in notice. */
            if (strrpos($phpMussel['FE']['SessionList'], "\n" . $phpMussel['RowInfo']['AccUsername'] . ',') !== false) {
                $phpMussel['RowInfo']['AccWarnings'] .= '<br /><div class="txtGn">' . $phpMussel['L10N']->getString('state_logged_in') . '</div>';
            }

            $phpMussel['RowInfo']['AccID'] = bin2hex($phpMussel['RowInfo']['AccUsername']);
            $phpMussel['RowInfo']['AccUsername'] = htmlentities(base64_decode($phpMussel['RowInfo']['AccUsername']));
            $phpMussel['FE']['NewLineOffset'] = $phpMussel['FE']['NewLinePos'];
            $phpMussel['FE']['Accounts'] .= $phpMussel['ParseVars'](
                $phpMussel['L10N']->Data + $phpMussel['RowInfo'],
                $phpMussel['FE']['AccountsRow']
            );
        }
        unset($phpMussel['RowInfo']);
    }

    if ($phpMussel['FE']['ASYNC']) {
        /** Send output (async). */
        echo $phpMussel['FE']['state_msg'];
    } else {
        /** Parse output. */
        $phpMussel['FE']['FE_Content'] = $phpMussel['ParseVars'](
            $phpMussel['L10N']->Data + $phpMussel['FE'],
            $phpMussel['ReadFile']($phpMussel['GetAssetPath']('_accounts.html'))
        );

        /** Send output. */
        echo $phpMussel['SendOutput']();
    }
}

/** Configuration. */
elseif ($phpMussel['QueryVars']['phpmussel-page'] === 'config' && $phpMussel['FE']['Permissions'] === 1) {
    /** Page initial prepwork. */
    $phpMussel['InitialPrepwork']($phpMussel['L10N']->getString('link_config'), $phpMussel['L10N']->getString('tip_config'));

    /** Append number localisation JS. */
    $phpMussel['FE']['JS'] .= $phpMussel['Number_L10N_JS']() . "\n";

    /** Directive template. */
    $phpMussel['FE']['ConfigRow'] = $phpMussel['ReadFile']($phpMussel['GetAssetPath']('_config_row.html'));

    $phpMussel['FE']['Indexes'] = '<ul class="pieul">';
    $phpMussel['FE']['ConfigFields'] = '';
    $phpMussel['RegenerateConfig'] = '';
    $phpMussel['ConfigModified'] = (!empty($phpMussel['QueryVars']['updated']) && $phpMussel['QueryVars']['updated'] === 'true');

    /** For required extensions, classes, etc. */
    $phpMussel['ReqsLookupCache'] = [];

    /** Iterate through configuration defaults. */
    foreach ($phpMussel['Config']['Config Defaults'] as $phpMussel['CatKey'] => $phpMussel['CatValue']) {
        if (!is_array($phpMussel['CatValue'])) {
            continue;
        }
        $phpMussel['RegenerateConfig'] .= '[' . $phpMussel['CatKey'] . ']';
        if ($phpMussel['CatInfo'] = $phpMussel['L10N']->getString('config_' . $phpMussel['CatKey']) ?: (
            isset($phpMussel['Config']['L10N']['config_' . $phpMussel['CatKey']]) ? $phpMussel['Config']['L10N']['config_' . $phpMussel['CatKey']] : ''
        )) {
            $phpMussel['CatInfo'] = '<br /><em>' . $phpMussel['CatInfo'] . '</em>';
            $phpMussel['RegenerateConfig'] .= "\r\n; " . wordwrap(str_replace(
                ['&amp;', '&lt;', '&gt;'],
                ['&', '<', '>'],
                strip_tags($phpMussel['CatInfo'])
            ), 77, "\r\n; ");
        }
        $phpMussel['RegenerateConfig'] .= "\r\n\r\n";
        $phpMussel['FE']['ConfigFields'] .= sprintf(
            '<table><tr><td class="ng2"><div id="%1$s-container" class="s">' .
            '<a id="%1$sShowLink" class="showlink" href="#%1$s-container" onclick="javascript:toggleconfig(\'%1$sRow\',\'%1$sShowLink\')">%1$s</a>' .
            '%3$s</div></td></tr></table><span id="%1$sRow" %2$s><table>',
            $phpMussel['CatKey'],
            'style="display:none"',
            $phpMussel['CatInfo']
        ) . "\n";
        $phpMussel['CatData'] = '';
        foreach ($phpMussel['CatValue'] as $phpMussel['DirKey'] => $phpMussel['DirValue']) {
            $phpMussel['ThisDir'] = ['Reset' => '', 'Preview' => '', 'Trigger' => '', 'FieldOut' => '', 'CatKey' => $phpMussel['CatKey']];
            if (empty($phpMussel['DirValue']['type']) || !isset($phpMussel['Config'][$phpMussel['CatKey']][$phpMussel['DirKey']])) {
                continue;
            }
            $phpMussel['ThisDir']['DirLangKey'] = 'config_' . $phpMussel['CatKey'] . '_' . $phpMussel['DirKey'];
            $phpMussel['ThisDir']['DirLangKeyOther'] = $phpMussel['ThisDir']['DirLangKey'] . '_other';
            $phpMussel['ThisDir']['DirName'] = '<span class="normalHeight">' . $phpMussel['LTRinRTF']($phpMussel['CatKey'] . '➡' . $phpMussel['DirKey']) . '</span>';
            $phpMussel['ThisDir']['Friendly'] = $phpMussel['L10N']->getString($phpMussel['ThisDir']['DirLangKey'] . '_label') ?: (
                isset($phpMussel['Config']['L10N'][$phpMussel['ThisDir']['DirLangKey'] . '_label']) ? $phpMussel['Config']['L10N'][$phpMussel['ThisDir']['DirLangKey'] . '_label'] : ''
            ) ?: $phpMussel['DirKey'];
            $phpMussel['CatData'] .= sprintf(
                '<li><a onclick="javascript:toggleconfigNav(\'%1$sRow\',\'%1$sShowLink\')" href="#%2$s">%3$s</a></li>',
                $phpMussel['CatKey'],
                $phpMussel['ThisDir']['DirLangKey'],
                $phpMussel['ThisDir']['Friendly']
            );
            $phpMussel['ThisDir']['DirLang'] =
                $phpMussel['L10N']->getString($phpMussel['ThisDir']['DirLangKey']) ?:
                $phpMussel['L10N']->getString('config_' . $phpMussel['CatKey']) ?:
                (isset($phpMussel['Config']['L10N'][$phpMussel['ThisDir']['DirLangKey']]) ? $phpMussel['Config']['L10N'][$phpMussel['ThisDir']['DirLangKey']] : '') ?:
                (isset($phpMussel['Config']['L10N']['config_' . $phpMussel['CatKey']]) ? $phpMussel['Config']['L10N']['config_' . $phpMussel['CatKey']] : '') ?:
                $phpMussel['L10N']->getString('response_error');
            if (!empty($phpMussel['DirValue']['experimental'])) {
                $phpMussel['ThisDir']['DirLang'] = '<code class="exp">' . $phpMussel['L10N']->getString('config_experimental') . '</code> ' . $phpMussel['ThisDir']['DirLang'];
            }
            $phpMussel['ThisDir']['autocomplete'] = empty($phpMussel['DirValue']['autocomplete']) ? '' : sprintf(
                ' autocomplete="%s"',
                $phpMussel['DirValue']['autocomplete']
            );
            $phpMussel['RegenerateConfig'] .= '; ' . wordwrap(str_replace(
                ['&amp;', '&lt;', '&gt;'],
                ['&', '<', '>'],
                strip_tags($phpMussel['ThisDir']['DirLang'])
            ), 77, "\r\n; ") . "\r\n";
            if (isset($_POST[$phpMussel['ThisDir']['DirLangKey']])) {
                if (in_array($phpMussel['DirValue']['type'], ['bool', 'float', 'int', 'kb', 'string', 'timezone', 'email', 'url'], true)) {
                    $phpMussel['AutoType']($_POST[$phpMussel['ThisDir']['DirLangKey']], $phpMussel['DirValue']['type']);
                }
                if (!preg_match('/[^\x20-\xFF"\']/', $_POST[$phpMussel['ThisDir']['DirLangKey']]) && (
                    !isset($phpMussel['DirValue']['choices']) ||
                    isset($phpMussel['DirValue']['choices'][$_POST[$phpMussel['ThisDir']['DirLangKey']]])
                )) {
                    $phpMussel['Config'][$phpMussel['CatKey']][$phpMussel['DirKey']] = $_POST[$phpMussel['ThisDir']['DirLangKey']];
                    $phpMussel['ConfigModified'] = true;
                } elseif (
                    !empty($phpMussel['DirValue']['allow_other']) &&
                    $_POST[$phpMussel['ThisDir']['DirLangKey']] === 'Other' &&
                    isset($_POST[$phpMussel['ThisDir']['DirLangKeyOther']]) &&
                    !preg_match('/[^\x20-\xFF"\']/', $_POST[$phpMussel['ThisDir']['DirLangKeyOther']])
                ) {
                    $phpMussel['Config'][$phpMussel['CatKey']][$phpMussel['DirKey']] = $_POST[$phpMussel['ThisDir']['DirLangKeyOther']];
                    $phpMussel['ConfigModified'] = true;
                }
            } elseif (
                empty($phpMussel['QueryVars']['updated']) &&
                $phpMussel['ConfigModified'] &&
                $phpMussel['DirValue']['type'] === 'checkbox' &&
                isset($phpMussel['DirValue']['choices']) &&
                is_array($phpMussel['DirValue']['choices'])
            ) {
                $phpMussel['DirValue']['Posts'] = [];
                foreach ($phpMussel['DirValue']['choices'] as $phpMussel['DirValue']['ThisChoiceKey'] => $phpMussel['DirValue']['ThisChoice']) {
                    if (isset($phpMussel['DirValue']['labels']) && is_array($phpMussel['DirValue']['labels'])) {
                        foreach ($phpMussel['DirValue']['labels'] as $phpMussel['DirValue']['ThisLabelKey'] => $phpMussel['DirValue']['ThisLabel']) {
                            if (!empty($_POST[$phpMussel['ThisDir']['DirLangKey'] . '_' . $phpMussel['DirValue']['ThisChoiceKey'] . '_' . $phpMussel['DirValue']['ThisLabelKey']])) {
                                $phpMussel['DirValue']['Posts'][] = $phpMussel['DirValue']['ThisChoiceKey'] . ':' . $phpMussel['DirValue']['ThisLabelKey'];
                            }
                        }
                    } elseif (!empty($_POST[$phpMussel['ThisDir']['DirLangKey'] . '_' . $phpMussel['DirValue']['ThisChoiceKey']])) {
                        $phpMussel['DirValue']['Posts'][] = $phpMussel['DirValue']['ThisChoiceKey'];
                    }
                }
                $phpMussel['DirValue']['Posts'] = implode(',', $phpMussel['DirValue']['Posts']) ?: '';
                if (!empty($_POST['updatingConfig']) && $phpMussel['Config'][$phpMussel['CatKey']][$phpMussel['DirKey']] !== $phpMussel['DirValue']['Posts']) {
                    $phpMussel['ConfigModified'] = true;
                    $phpMussel['Config'][$phpMussel['CatKey']][$phpMussel['DirKey']] = $phpMussel['DirValue']['Posts'];
                }
            }
            if ($phpMussel['Config'][$phpMussel['CatKey']][$phpMussel['DirKey']] === true) {
                $phpMussel['RegenerateConfig'] .= $phpMussel['DirKey'] . "=true\r\n\r\n";
            } elseif ($phpMussel['Config'][$phpMussel['CatKey']][$phpMussel['DirKey']] === false) {
                $phpMussel['RegenerateConfig'] .= $phpMussel['DirKey'] . "=false\r\n\r\n";
            } elseif (in_array($phpMussel['DirValue']['type'], ['float', 'int'], true)) {
                $phpMussel['RegenerateConfig'] .= $phpMussel['DirKey'] . '=' . $phpMussel['Config'][$phpMussel['CatKey']][$phpMussel['DirKey']] . "\r\n\r\n";
            } else {
                $phpMussel['RegenerateConfig'] .= $phpMussel['DirKey'] . '=\'' . $phpMussel['Config'][$phpMussel['CatKey']][$phpMussel['DirKey']] . "'\r\n\r\n";
            }
            if (isset($phpMussel['DirValue']['preview'])) {
                $phpMussel['ThisDir']['Preview'] = ($phpMussel['DirValue']['preview'] === 'allow_other') ? '' : sprintf(
                    $phpMussel['DirValue']['preview_default_fill'] ?? ' = <span id="%s_preview"></span>',
                    $phpMussel['ThisDir']['DirLangKey']
                );
                $phpMussel['ThisDir']['Trigger'] = ' onchange="javascript:' . $phpMussel['ThisDir']['DirLangKey'] . '_function();" onkeyup="javascript:' . $phpMussel['ThisDir']['DirLangKey'] . '_function();"';
                if ($phpMussel['DirValue']['preview'] === 'kb') {
                    $phpMussel['ThisDir']['Preview'] .= sprintf(
                        '<script type="text/javascript">function %1$s_function(){var e=%7$s?%7$s(' .
                        '\'%1$s_field\').value:%8$s&&!%7$s?%8$s.%1$s_field.value:\'\',z=e.replace' .
                        '(/o$/i,\'b\').substr(-2).toLowerCase(),y=\'kb\'==z?1:\'mb\'==z?1024:\'gb' .
                        '\'==z?1048576:\'tb\'==z?1073741824:\'b\'==e.substr(-1)?.0009765625:1,e=e' .
                        '.replace(/[^0-9]*$/i,\'\'),e=isNaN(e)?0:e*y,t=0>e?\'0 %2$s\':1>e?nft((10' .
                        '24*e).toFixed(0))+\' %2$s\':1024>e?nft((1*e).toFixed(2))+\' %3$s\':10485' .
                        '76>e?nft((e/1024).toFixed(2))+\' %4$s\':1073741824>e?nft((e/1048576).toF' .
                        'ixed(2))+\' %5$s\':nft((e/1073741824).toFixed(2))+\' %6$s\';%7$s?%7$s(\'' .
                        '%1$s_preview\').innerHTML=t:%8$s&&!%7$s?%8$s.%1$s_preview.innerHTML=t:\'' .
                        '\'};%1$s_function();</script>',
                        $phpMussel['ThisDir']['DirLangKey'],
                        $phpMussel['L10N']->getPlural(0, 'field_size_bytes'),
                        $phpMussel['L10N']->getString('field_size_KB'),
                        $phpMussel['L10N']->getString('field_size_MB'),
                        $phpMussel['L10N']->getString('field_size_GB'),
                        $phpMussel['L10N']->getString('field_size_TB'),
                        'document.getElementById',
                        'document.all'
                    );
                } elseif ($phpMussel['DirValue']['preview'] === 'seconds') {
                    $phpMussel['ThisDir']['Preview'] .= sprintf(
                        '<script type="text/javascript">function %1$s_function(){var t=%9$s?%9$s(' .
                        '\'%1$s_field\').value:%10$s&&!%9$s?%10$s.%1$s_field.value:\'\',e=isNaN(t' .
                        ')?0:0>t?t*-1:t,n=e?Math.floor(e/31536e3):0,e=e?e-31536e3*n:0,o=e?Math.fl' .
                        'oor(e/2592e3):0,e=e-2592e3*o,l=e?Math.floor(e/604800):0,e=e-604800*l,r=e' .
                        '?Math.floor(e/86400):0,e=e-86400*r,d=e?Math.floor(e/3600):0,e=e-3600*d,i' .
                        '=e?Math.floor(e/60):0,e=e-60*i,f=e?Math.floor(1*e):0,a=nft(n.toString())' .
                        '+\' %2$s – \'+nft(o.toString())+\' %3$s – \'+nft(l.toString())+\' %4$s –' .
                        ' \'+nft(r.toString())+\' %5$s – \'+nft(d.toString())+\' %6$s – \'+nft(i.' .
                        'toString())+\' %7$s – \'+nft(f.toString())+\' %8$s\';%9$s?%9$s(\'%1$s_pr' .
                        'eview\').innerHTML=a:%10$s&&!%9$s?%10$s.%1$s_preview.innerHTML=a:\'\'}' .
                        '%1$s_function();</script>',
                        $phpMussel['ThisDir']['DirLangKey'],
                        $phpMussel['L10N']->getString('previewer_years'),
                        $phpMussel['L10N']->getString('previewer_months'),
                        $phpMussel['L10N']->getString('previewer_weeks'),
                        $phpMussel['L10N']->getString('previewer_days'),
                        $phpMussel['L10N']->getString('previewer_hours'),
                        $phpMussel['L10N']->getString('previewer_minutes'),
                        $phpMussel['L10N']->getString('previewer_seconds'),
                        'document.getElementById',
                        'document.all'
                    );
                } elseif ($phpMussel['DirValue']['preview'] === 'minutes') {
                    $phpMussel['ThisDir']['Preview'] .= sprintf(
                        '<script type="text/javascript">function %1$s_function(){var t=%9$s?%9$s(' .
                        '\'%1$s_field\').value:%10$s&&!%9$s?%10$s.%1$s_field.value:\'\',e=isNaN(t' .
                        ')?0:0>t?t*-1:t,n=e?Math.floor(e/525600):0,e=e?e-525600*n:0,o=e?Math.floo' .
                        'r(e/43200):0,e=e-43200*o,l=e?Math.floor(e/10080):0,e=e-10080*l,r=e?Math.' .
                        'floor(e/1440):0,e=e-1440*r,d=e?Math.floor(e/60):0,e=e-60*d,i=e?Math.floo' .
                        'r(e*1):0,e=e-i,f=e?Math.floor(60*e):0,a=nft(n.toString())+\' %2$s – \'+n' .
                        'ft(o.toString())+\' %3$s – \'+nft(l.toString())+\' %4$s – \'+nft(r.toStr' .
                        'ing())+\' %5$s – \'+nft(d.toString())+\' %6$s – \'+nft(i.toString())+\' ' .
                        '%7$s – \'+nft(f.toString())+\' %8$s\';%9$s?%9$s(\'%1$s_preview\').innerH' .
                        'TML=a:%10$s&&!%9$s?%10$s.%1$s_preview.innerHTML=a:\'\'}%1$s_function();<' .
                        '/script>',
                        $phpMussel['ThisDir']['DirLangKey'],
                        $phpMussel['L10N']->getString('previewer_years'),
                        $phpMussel['L10N']->getString('previewer_months'),
                        $phpMussel['L10N']->getString('previewer_weeks'),
                        $phpMussel['L10N']->getString('previewer_days'),
                        $phpMussel['L10N']->getString('previewer_hours'),
                        $phpMussel['L10N']->getString('previewer_minutes'),
                        $phpMussel['L10N']->getString('previewer_seconds'),
                        'document.getElementById',
                        'document.all'
                    );
                } elseif ($phpMussel['DirValue']['preview'] === 'hours') {
                    $phpMussel['ThisDir']['Preview'] .= sprintf(
                        '<script type="text/javascript">function %1$s_function(){var t=%9$s?%9$s(' .
                        '\'%1$s_field\').value:%10$s&&!%9$s?%10$s.%1$s_field.value:\'\',e=isNaN(t' .
                        ')?0:0>t?t*-1:t,n=e?Math.floor(e/8760):0,e=e?e-8760*n:0,o=e?Math.floor(e/' .
                        '720):0,e=e-720*o,l=e?Math.floor(e/168):0,e=e-168*l,r=e?Math.floor(e/24):' .
                        '0,e=e-24*r,d=e?Math.floor(e*1):0,e=e-d,i=e?Math.floor(60*e):0,e=e-(i/60)' .
                        ',f=e?Math.floor(3600*e):0,a=nft(n.toString())+\' %2$s – \'+nft(o.toStrin' .
                        'g())+\' %3$s – \'+nft(l.toString())+\' %4$s – \'+nft(r.toString())+\' ' .
                        '%5$s – \'+nft(d.toString())+\' %6$s – \'+nft(i.toString())+\' %7$s – \'+' .
                        'nft(f.toString())+\' %8$s\';%9$s?%9$s(\'%1$s_preview\').innerHTML=a:' .
                        '%10$s&&!%9$s?%10$s.%1$s_preview.innerHTML=a:\'\'}%1$s_function();</script>',
                        $phpMussel['ThisDir']['DirLangKey'],
                        $phpMussel['L10N']->getString('previewer_years'),
                        $phpMussel['L10N']->getString('previewer_months'),
                        $phpMussel['L10N']->getString('previewer_weeks'),
                        $phpMussel['L10N']->getString('previewer_days'),
                        $phpMussel['L10N']->getString('previewer_hours'),
                        $phpMussel['L10N']->getString('previewer_minutes'),
                        $phpMussel['L10N']->getString('previewer_seconds'),
                        'document.getElementById',
                        'document.all'
                    );
                } elseif ($phpMussel['DirValue']['preview'] === 'allow_other') {
                    $phpMussel['ThisDir']['Preview'] .= sprintf(
                        '<script type="text/javascript">function %1$s_function(){var e=%2$s?%2$s(' .
                        '\'%1$s_field\').value:%3$s&&!%2$s?%3$s.%1$s_field.value:\'\';e==\'Other\'' .
                        '?showid(\'%4$s_field\'):hideid(\'%4$s_field\')};%1$s_function();</script>',
                        $phpMussel['ThisDir']['DirLangKey'],
                        'document.getElementById',
                        'document.all',
                        $phpMussel['ThisDir']['DirLangKeyOther']
                    );
                } elseif (substr($phpMussel['DirValue']['preview'], 0, 3) === 'js:') {
                    $phpMussel['ThisDir']['Preview'] .= '<script type="text/javascript">' . sprintf(
                        substr($phpMussel['DirValue']['preview'], 3),
                        $phpMussel['ThisDir']['DirLangKey']
                    ) . '</script>';
                }
            }
            if ($phpMussel['DirValue']['type'] === 'timezone') {
                $phpMussel['DirValue']['choices'] = ['SYSTEM' => $phpMussel['L10N']->getString('field_system_timezone')];
                foreach (array_unique(\DateTimeZone::listIdentifiers()) as $phpMussel['DirValue']['ChoiceValue']) {
                    $phpMussel['DirValue']['choices'][$phpMussel['DirValue']['ChoiceValue']] = $phpMussel['DirValue']['ChoiceValue'];
                }
            }
            if (isset($phpMussel['DirValue']['choices'])) {
                if (
                    $phpMussel['DirValue']['type'] === 'checkbox' ||
                    (isset($phpMussel['DirValue']['style']) && $phpMussel['DirValue']['style'] === 'radio')
                ) {
                    if (
                        $phpMussel['DirValue']['type'] === 'checkbox' &&
                        isset($phpMussel['DirValue']['labels']) &&
                        is_array($phpMussel['DirValue']['labels'])
                    ) {
                        $phpMussel['DirValue']['gridV'] = 'gridVB';
                        $phpMussel['ThisDir']['FieldOut'] = sprintf(
                            '<div style="display:grid;margin:auto 38px;grid-template-columns:repeat(%s) auto;text-align:%s">',
                            count($phpMussel['DirValue']['labels']) . ',minmax(0, 1fr)',
                            $phpMussel['FE']['FE_Align']
                        );
                        $phpMussel['DirValue']['HasLabels'] = true;
                        foreach ($phpMussel['DirValue']['labels'] as $phpMussel['DirValue']['ThisLabel']) {
                            $phpMussel['DirValue']['gridV'] = ($phpMussel['DirValue']['gridV']) === 'gridVB' ? 'gridVA' : 'gridVB';
                            $phpMussel['ReplaceLabelWithL10N']($phpMussel['DirValue']['ThisLabel']);
                            $phpMussel['ThisDir']['FieldOut'] .= sprintf(
                                '<div class="gridboxitem configMatrixLabel %s">%s</div>',
                                $phpMussel['DirValue']['gridV'],
                                $phpMussel['DirValue']['ThisLabel']
                            );
                        }
                        $phpMussel['ThisDir']['FieldOut'] .= '<div class="gridboxitem"></div>';
                    } else {
                        $phpMussel['ThisDir']['FieldOut'] = sprintf(
                            '<div style="display:grid;margin:auto 38px;grid-template-columns:19px auto;text-align:%s">',
                            $phpMussel['FE']['FE_Align']
                        );
                        $phpMussel['DirValue']['HasLabels'] = false;
                    }
                } else {
                    $phpMussel['ThisDir']['FieldOut'] = sprintf(
                        '<select class="auto" style="text-transform:capitalize" name="%1$s" id="%1$s_field"%2$s>',
                        $phpMussel['ThisDir']['DirLangKey'],
                        $phpMussel['ThisDir']['Trigger']
                    );
                }
                $phpMussel['DirValue']['gridH'] = 'gridHB';
                foreach ($phpMussel['DirValue']['choices'] as $phpMussel['ChoiceKey'] => $phpMussel['ChoiceValue']) {
                    if (isset($phpMussel['DirValue']['choice_filter'])) {
                        if (
                            !is_string($phpMussel['ChoiceValue']) ||
                            !$phpMussel[$phpMussel['DirValue']['choice_filter']]($phpMussel['ChoiceKey'], $phpMussel['ChoiceValue'])
                        ) {
                            continue;
                        }
                    }
                    $phpMussel['DirValue']['gridV'] = 'gridVB';
                    $phpMussel['DirValue']['gridH'] = ($phpMussel['DirValue']['gridH']) === 'gridHB' ? 'gridHA' : 'gridHB';
                    $phpMussel['ChoiceValue'] = $phpMussel['TimeFormat']($phpMussel['Time'], $phpMussel['ChoiceValue']);
                    if (strpos($phpMussel['ChoiceValue'], '{') !== false) {
                        $phpMussel['ChoiceValue'] = $phpMussel['ParseVars']($phpMussel['L10N']->Data, $phpMussel['ChoiceValue']);
                    }
                    $phpMussel['ReplaceLabelWithL10N']($phpMussel['ChoiceValue']);
                    if ($phpMussel['DirValue']['type'] === 'checkbox') {
                        if ($phpMussel['DirValue']['HasLabels']) {
                            foreach ($phpMussel['DirValue']['labels'] as $phpMussel['DirValue']['ThisLabelKey'] => $phpMussel['DirValue']['ThisLabel']) {
                                $phpMussel['DirValue']['gridV'] = ($phpMussel['DirValue']['gridV']) === 'gridVB' ? 'gridVA' : 'gridVB';
                                $phpMussel['ThisDir']['FieldOut'] .= sprintf(
                                    '<div class="gridboxcheckcell %4$s %5$s"><label class="gridlabel"><input%3$s type="checkbox" class="auto" name="%1$s" id="%1$s"%2$s /></label></div>',
                                    $phpMussel['ThisDir']['DirLangKey'] . '_' . $phpMussel['ChoiceKey'] . '_' . $phpMussel['DirValue']['ThisLabelKey'],
                                    $phpMussel['Request']->inCsv(
                                        $phpMussel['ChoiceKey'] . ':' . $phpMussel['DirValue']['ThisLabelKey'],
                                        $phpMussel['Config'][$phpMussel['CatKey']][$phpMussel['DirKey']]
                                    ) ? ' checked' : '',
                                    $phpMussel['ThisDir']['Trigger'],
                                    $phpMussel['DirValue']['gridV'],
                                    $phpMussel['DirValue']['gridH']
                                );
                                $phpMussel['ThisDir']['Reset'] .= sprintf(
                                    'document.getElementById(\'%s\').checked=%s;',
                                    $phpMussel['ThisDir']['DirLangKey'] . '_' . $phpMussel['ChoiceKey'] . '_' . $phpMussel['DirValue']['ThisLabelKey'],
                                    isset($phpMussel['Config']['Config Defaults'][$phpMussel['CatKey']][$phpMussel['DirKey']]['default']) && $phpMussel['Request']->inCsv(
                                        $phpMussel['ChoiceKey'] . ':' . $phpMussel['DirValue']['ThisLabelKey'],
                                        $phpMussel['Config']['Config Defaults'][$phpMussel['CatKey']][$phpMussel['DirKey']]['default']
                                    ) ? 'true' : 'false'
                                );
                            }
                            $phpMussel['ThisDir']['FieldOut'] .= sprintf(
                                '<div class="gridboxitem %s %s">%s</div>',
                                $phpMussel['DirValue']['gridH'],
                                (count($phpMussel['DirValue']['labels']) % 2) === 0 ? 'vrte' : 'vrto',
                                $phpMussel['ChoiceValue']
                            );
                        } else {
                            $phpMussel['ThisDir']['FieldOut'] .= sprintf(
                                '<div class="gridboxcheckcell gridVA %5$s"><label class="gridlabel"><input%4$s type="checkbox" class="auto" name="%1$s" id="%1$s"%2$s /></label></div><div class="gridboxitem %5$s"><label for="%1$s" class="s">%3$s</label></div>',
                                $phpMussel['ThisDir']['DirLangKey'] . '_' . $phpMussel['ChoiceKey'],
                                $phpMussel['Request']->inCsv(
                                    $phpMussel['ChoiceKey'],
                                    $phpMussel['Config'][$phpMussel['CatKey']][$phpMussel['DirKey']]
                                ) ? ' checked' : '',
                                $phpMussel['ChoiceValue'],
                                $phpMussel['ThisDir']['Trigger'],
                                $phpMussel['DirValue']['gridH']
                            );
                            $phpMussel['ThisDir']['Reset'] .= sprintf(
                                'document.getElementById(\'%s\').checked=%s;',
                                $phpMussel['ThisDir']['DirLangKey'] . '_' . $phpMussel['ChoiceKey'],
                                isset($phpMussel['Config']['Config Defaults'][$phpMussel['CatKey']][$phpMussel['DirKey']]['default']) && $phpMussel['Request']->inCsv(
                                    $phpMussel['ChoiceKey'],
                                    $phpMussel['Config']['Config Defaults'][$phpMussel['CatKey']][$phpMussel['DirKey']]['default']
                                ) ? 'true' : 'false'
                            );
                        }
                    } elseif (isset($phpMussel['DirValue']['style']) && $phpMussel['DirValue']['style'] === 'radio') {
                        if (strpos($phpMussel['ChoiceValue'], "\n")) {
                            $phpMussel['ChoiceValue'] = explode("\n", $phpMussel['ChoiceValue']);
                            $phpMussel['ThisDir']['FieldOut'] .= sprintf(
                                '<div class="gridboxstretch gridVA %5$s"><label class="gridlabel"><input%4$s type="radio" class="auto" name="%6$s" id="%1$s" value="%7$s"%2$s /></label></div><div class="gridboxstretch %5$s"><label for="%1$s"><span class="s">%3$s</span><br />%8$s</label></div>',
                                $phpMussel['ThisDir']['DirLangKey'] . '_' . $phpMussel['ChoiceKey'],
                                $phpMussel['ChoiceKey'] === $phpMussel['Config'][$phpMussel['CatKey']][$phpMussel['DirKey']] ? ' checked' : '',
                                $phpMussel['ChoiceValue'][0],
                                $phpMussel['ThisDir']['Trigger'],
                                $phpMussel['DirValue']['gridH'],
                                $phpMussel['ThisDir']['DirLangKey'],
                                $phpMussel['ChoiceKey'],
                                $phpMussel['ChoiceValue'][1]
                            );
                        } else {
                            $phpMussel['ThisDir']['FieldOut'] .= sprintf(
                                '<div class="gridboxcheckcell gridVA %5$s"><label class="gridlabel"><input%4$s type="radio" class="auto" name="%6$s" id="%1$s" value="%7$s"%2$s /></label></div><div class="gridboxitem %5$s"><label for="%1$s" class="s">%3$s</label></div>',
                                $phpMussel['ThisDir']['DirLangKey'] . '_' . $phpMussel['ChoiceKey'],
                                $phpMussel['ChoiceKey'] === $phpMussel['Config'][$phpMussel['CatKey']][$phpMussel['DirKey']] ? ' checked' : '',
                                $phpMussel['ChoiceValue'],
                                $phpMussel['ThisDir']['Trigger'],
                                $phpMussel['DirValue']['gridH'],
                                $phpMussel['ThisDir']['DirLangKey'],
                                $phpMussel['ChoiceKey']
                            );
                        }
                        if (
                            isset($phpMussel['Config']['Config Defaults'][$phpMussel['CatKey']][$phpMussel['DirKey']]['default']) &&
                            $phpMussel['ChoiceKey'] === $phpMussel['Config']['Config Defaults'][$phpMussel['CatKey']][$phpMussel['DirKey']]['default']
                        ) {
                            $phpMussel['ThisDir']['Reset'] .= sprintf(
                                'document.getElementById(\'%s\').checked=true;',
                                $phpMussel['ThisDir']['DirLangKey'] . '_' . $phpMussel['ChoiceKey']
                            );
                        }
                    } else {
                        $phpMussel['ThisDir']['FieldOut'] .= sprintf(
                            '<option style="text-transform:capitalize" value="%s"%s>%s</option>',
                            $phpMussel['ChoiceKey'],
                            $phpMussel['ChoiceKey'] === $phpMussel['Config'][$phpMussel['CatKey']][$phpMussel['DirKey']] ? ' selected' : '',
                            $phpMussel['ChoiceValue']
                        );
                        if (
                            isset($phpMussel['Config']['Config Defaults'][$phpMussel['CatKey']][$phpMussel['DirKey']]['default']) &&
                            $phpMussel['ChoiceKey'] === $phpMussel['Config']['Config Defaults'][$phpMussel['CatKey']][$phpMussel['DirKey']]['default']
                        ) {
                            $phpMussel['ThisDir']['Reset'] .= sprintf(
                                'document.getElementById(\'%s_field\').value=\'%s\';',
                                $phpMussel['ThisDir']['DirLangKey'],
                                addcslashes($phpMussel['ChoiceKey'], "\n'\"\\")
                            );
                        }
                    }
                }
                if (
                    $phpMussel['DirValue']['type'] === 'checkbox' ||
                    (isset($phpMussel['DirValue']['style']) && $phpMussel['DirValue']['style'] === 'radio')
                ) {
                    $phpMussel['ThisDir']['FieldOut'] .= '</div>';
                } else {
                    $phpMussel['ThisDir']['SelectOther'] = !isset($phpMussel['DirValue']['choices'][$phpMussel['Config'][$phpMussel['CatKey']][$phpMussel['DirKey']]]);
                    $phpMussel['ThisDir']['FieldOut'] .= empty($phpMussel['DirValue']['allow_other']) ? '</select>' : sprintf(
                        '<option value="Other"%1$s>%2$s</option></select> <input type="text"%3$s class="auto" name="%4$s" id="%4$s_field" value="%5$s" />',
                        $phpMussel['ThisDir']['SelectOther'] ? ' selected' : '',
                        $phpMussel['L10N']->getString('label_other'),
                        $phpMussel['ThisDir']['SelectOther'] ? '' : ' style="display:none"',
                        $phpMussel['ThisDir']['DirLangKeyOther'],
                        $phpMussel['Config'][$phpMussel['CatKey']][$phpMussel['DirKey']]
                    );
                }
            } elseif ($phpMussel['DirValue']['type'] === 'bool') {
                $phpMussel['ThisDir']['FieldOut'] = sprintf(
                    '<select class="auto" name="%1$s" id="%1$s_field"%2$s><option value="true"%5$s>%3$s</option><option value="false"%6$s>%4$s</option></select>',
                    $phpMussel['ThisDir']['DirLangKey'],
                    $phpMussel['ThisDir']['Trigger'],
                    $phpMussel['L10N']->getString('field_true'),
                    $phpMussel['L10N']->getString('field_false'),
                    ($phpMussel['Config'][$phpMussel['CatKey']][$phpMussel['DirKey']] ? ' selected' : ''),
                    ($phpMussel['Config'][$phpMussel['CatKey']][$phpMussel['DirKey']] ? '' : ' selected')
                );
                $phpMussel['ThisDir']['Reset'] .= sprintf(
                    'document.getElementById(\'%s_field\').value=\'%s\';',
                    $phpMussel['ThisDir']['DirLangKey'],
                    empty($phpMussel['Config']['Config Defaults'][$phpMussel['CatKey']][$phpMussel['DirKey']]['default']) ? 'false' : 'true'
                );
            } elseif (in_array($phpMussel['DirValue']['type'], ['float', 'int'], true)) {
                $phpMussel['ThisDir']['FieldOut'] = sprintf(
                    '<input type="number" name="%1$s" id="%1$s_field" value="%2$s"%3$s%4$s%5$s />',
                    $phpMussel['ThisDir']['DirLangKey'],
                    $phpMussel['Config'][$phpMussel['CatKey']][$phpMussel['DirKey']],
                    (isset($phpMussel['DirValue']['step']) ? ' step="' . $phpMussel['DirValue']['step'] . '"' : ''),
                    $phpMussel['ThisDir']['Trigger'],
                    ($phpMussel['DirValue']['type'] === 'int' ? ' inputmode="numeric"' : '')
                );
                if (isset($phpMussel['Config']['Config Defaults'][$phpMussel['CatKey']][$phpMussel['DirKey']]['default'])) {
                    $phpMussel['ThisDir']['Reset'] .= sprintf(
                        'document.getElementById(\'%s_field\').value=%s;',
                        $phpMussel['ThisDir']['DirLangKey'],
                        $phpMussel['Config']['Config Defaults'][$phpMussel['CatKey']][$phpMussel['DirKey']]['default']
                    );
                }
            } elseif ($phpMussel['DirValue']['type'] === 'url' || (
                empty($phpMussel['DirValue']['autocomplete']) && $phpMussel['DirValue']['type'] === 'string'
            )) {
                $phpMussel['ThisDir']['FieldOut'] = sprintf(
                    '<textarea name="%1$s" id="%1$s_field" class="half"%2$s%3$s>%4$s</textarea>',
                    $phpMussel['ThisDir']['DirLangKey'],
                    $phpMussel['ThisDir']['autocomplete'],
                    $phpMussel['ThisDir']['Trigger'],
                    $phpMussel['Config'][$phpMussel['CatKey']][$phpMussel['DirKey']]
                );
                if (isset($phpMussel['Config']['Config Defaults'][$phpMussel['CatKey']][$phpMussel['DirKey']]['default'])) {
                    $phpMussel['ThisDir']['Reset'] .= sprintf(
                        'document.getElementById(\'%s_field\').value=\'%s\';',
                        $phpMussel['ThisDir']['DirLangKey'],
                        addcslashes($phpMussel['Config']['Config Defaults'][$phpMussel['CatKey']][$phpMussel['DirKey']]['default'], "\n'\"\\")
                    );
                }
            } else {
                $phpMussel['ThisDir']['FieldOut'] = sprintf(
                    '<input type="text" name="%1$s" id="%1$s_field" value="%2$s"%3$s%4$s />',
                    $phpMussel['ThisDir']['DirLangKey'],
                    $phpMussel['Config'][$phpMussel['CatKey']][$phpMussel['DirKey']],
                    $phpMussel['ThisDir']['autocomplete'],
                    $phpMussel['ThisDir']['Trigger']
                );
                if (isset($phpMussel['Config']['Config Defaults'][$phpMussel['CatKey']][$phpMussel['DirKey']]['default'])) {
                    $phpMussel['ThisDir']['Reset'] .= sprintf(
                        'document.getElementById(\'%s_field\').value=\'%s\';',
                        $phpMussel['ThisDir']['DirLangKey'],
                        addcslashes($phpMussel['Config']['Config Defaults'][$phpMussel['CatKey']][$phpMussel['DirKey']]['default'], "\n'\"\\")
                    );
                }
            }
            $phpMussel['ThisDir']['FieldOut'] .= $phpMussel['ThisDir']['Preview'];

            /** Check extension and class requirements. */
            if (!empty($phpMussel['DirValue']['required'])) {
                $phpMussel['ThisDir']['FieldOut'] .= '<small>';
                foreach ($phpMussel['DirValue']['required'] as $phpMussel['DirValue']['Requirement'] => $phpMussel['DirValue']['Friendly']) {
                    if (isset($phpMussel['ReqsLookupCache'][$phpMussel['DirValue']['Requirement']])) {
                        $phpMussel['ThisDir']['FieldOut'] .= $phpMussel['ReqsLookupCache'][$phpMussel['DirValue']['Requirement']];
                        continue;
                    }
                    if (substr($phpMussel['DirValue']['Requirement'], 0, 1) === "\\") {
                        $phpMussel['ReqsLookupCache'][$phpMussel['DirValue']['Requirement']] = '<br /><span class="txtGn">✔️ ' . sprintf(
                            $phpMussel['L10N']->getString('label_is_available_class'),
                            $phpMussel['DirValue']['Friendly']
                        ) . '</span>';
                    } elseif (extension_loaded($phpMussel['DirValue']['Requirement'])) {
                        $phpMussel['DirValue']['ReqVersion'] = (new \ReflectionExtension($phpMussel['DirValue']['Requirement']))->getVersion();
                        $phpMussel['ReqsLookupCache'][$phpMussel['DirValue']['Requirement']] = '<br /><span class="txtGn">✔️ ' . sprintf(
                            $phpMussel['L10N']->getString('label_is_available'),
                            $phpMussel['DirValue']['Friendly'],
                            $phpMussel['DirValue']['ReqVersion']
                        ) . '</span>';
                    } else {
                        $phpMussel['ReqsLookupCache'][$phpMussel['DirValue']['Requirement']] = '<br /><span class="txtRd">❌ ' . sprintf(
                            $phpMussel['L10N']->getString('label_is_not_available'),
                            $phpMussel['DirValue']['Friendly']
                        ) . '</span>';
                    }
                    $phpMussel['ThisDir']['FieldOut'] .= $phpMussel['ReqsLookupCache'][$phpMussel['DirValue']['Requirement']];
                }
                $phpMussel['ThisDir']['FieldOut'] .= '</small>';
            }

            /** Provide hints, useful for users to better understand the directive at hand. */
            if (!empty($phpMussel['DirValue']['hints'])) {
                $phpMussel['ThisDir']['Hints'] = $phpMussel['ArrayFromL10NDataToArray']($phpMussel['DirValue']['hints']);
                foreach ($phpMussel['ThisDir']['Hints'] as $phpMussel['ThisDir']['HintKey'] => $phpMussel['ThisDir']['HintValue']) {
                    if (is_int($phpMussel['ThisDir']['HintKey'])) {
                        $phpMussel['ThisDir']['FieldOut'] .= sprintf("\n<br /><br />%s", $phpMussel['ThisDir']['HintValue']);
                        continue;
                    }
                    $phpMussel['ThisDir']['FieldOut'] .= sprintf(
                        "\n<br /><br /><span class=\"s\">%s</span> %s",
                        $phpMussel['ThisDir']['HintKey'],
                        $phpMussel['ThisDir']['HintValue']
                    );
                }
            }

            /** Provide additional information, useful for users to better understand the directive at hand. */
            if (!empty($phpMussel['DirValue']['See also']) && is_array($phpMussel['DirValue']['See also'])) {
                $phpMussel['ThisDir']['FieldOut'] .= sprintf("\n<br /><br />%s<ul>\n", $phpMussel['L10N']->getString('label_see_also'));
                foreach ($phpMussel['DirValue']['See also'] as $phpMussel['DirValue']['Ref key'] => $phpMussel['DirValue']['Ref link']) {
                    if (isset($phpMussel['L10N']->Data[$phpMussel['DirValue']['Ref key']])) {
                        $phpMussel['DirValue']['Ref key'] = $phpMussel['L10N']->Data[$phpMussel['DirValue']['Ref key']];
                    }
                    $phpMussel['ThisDir']['FieldOut'] .= sprintf(
                        '<li><a dir="ltr" href="%s">%s</a></li>',
                        $phpMussel['DirValue']['Ref link'],
                        $phpMussel['DirValue']['Ref key']
                    );
                }
                $phpMussel['ThisDir']['FieldOut'] .= "\n</ul>";
            }

            /** Reset to defaults. */
            if ($phpMussel['ThisDir']['Reset'] !== '') {
                $phpMussel['ThisDir']['FieldOut'] .= sprintf(
                    '<br /><br /><input type="button" class="reset" onclick="javascript:%s" value="↺ %s" />',
                    $phpMussel['ThisDir']['Reset'],
                    $phpMussel['L10N']->getString('field_reset')
                );
            }

            /** Finalise configuration row. */
            $phpMussel['FE']['ConfigFields'] .= $phpMussel['ParseVars'](
                $phpMussel['L10N']->Data + $phpMussel['ThisDir'],
                $phpMussel['FE']['ConfigRow']
            );
        }
        $phpMussel['CatKeyFriendly'] = $phpMussel['L10N']->getString('config_' . $phpMussel['CatKey'] . '_label') ?: (
            isset($phpMussel['Config']['L10N']['config_' . $phpMussel['CatKey'] . '_label']) ? $phpMussel['Config']['L10N']['config_' . $phpMussel['CatKey'] . '_label'] : ''
        ) ?: $phpMussel['CatKey'];
        $phpMussel['FE']['Indexes'] .= sprintf(
            '<li><span class="comCat">%s</span><ul class="comSub">%s</ul></li>',
            $phpMussel['CatKeyFriendly'],
            $phpMussel['CatData']
        );
        $phpMussel['FE']['ConfigFields'] .= "</table></span>\n";
        $phpMussel['RegenerateConfig'] .= "\r\n";
    }

    /** Cleanup. */
    unset($phpMussel['ReqsLookupCache']);

    /** Update the currently active configuration file if any changes were made. */
    if ($phpMussel['ConfigModified']) {
        $phpMussel['FE']['state_msg'] = $phpMussel['L10N']->getString('response_configuration_updated');
        $phpMussel['Handle'] = fopen($phpMussel['Vault'] . $phpMussel['FE']['ActiveConfigFile'], 'wb');
        fwrite($phpMussel['Handle'], $phpMussel['RegenerateConfig']);
        fclose($phpMussel['Handle']);
        if (empty($phpMussel['QueryVars']['updated'])) {
            header('Location: ?phpmussel-page=config&updated=true');
            die;
        }
    }

    $phpMussel['FE']['Indexes'] .= '</ul>';

    /** Parse output. */
    $phpMussel['FE']['FE_Content'] = $phpMussel['ParseVars'](
        $phpMussel['L10N']->Data + $phpMussel['FE'],
        $phpMussel['ReadFile']($phpMussel['GetAssetPath']('_config.html'))
    ) . $phpMussel['MenuToggle'];

    /** Send output. */
    echo $phpMussel['SendOutput']();
}

/** Cache data. */
elseif ($phpMussel['QueryVars']['phpmussel-page'] === 'cache-data' && $phpMussel['FE']['Permissions'] === 1) {
    /** Page initial prepwork. */
    $phpMussel['InitialPrepwork']($phpMussel['L10N']->getString('link_cache_data'), $phpMussel['L10N']->getString('tip_cache_data'));

    if ($phpMussel['FE']['ASYNC']) {
        /** Delete a cache entry. */
        if (isset($_POST['do']) && $_POST['do'] === 'delete') {
            if (!empty($_POST['cdi'])) {
                if ($_POST['cdi'] === '__') {
                    $phpMussel['CleanCache']();
                    $phpMussel['Cache']->clearCache();
                } else {
                    $phpMussel['CleanCache']();
                    $phpMussel['Cache']->deleteEntry($_POST['cdi']);
                }
            } elseif (!empty($_POST['fecdi'])) {
                $phpMussel['FECacheRemove']($phpMussel['FE']['Cache'], $phpMussel['FE']['Rebuild'], $_POST['fecdi']);
            }
        }
    } else {
        /** Append async globals. */
        $phpMussel['FE']['JS'] .=
            "function cdd(d){window.cdi=d,window.do='delete',$('POST','',['phpmussel-" .
            "form-target','cdi','do'],null,function(o){hideid(d+'Container')})}window" .
            "['phpmussel-form-target']='cache-data';function fecdd(d){window.fecdi=d," .
            "window.do='delete',$('POST','',['phpmussel-form-target','fecdi','do'],nu" .
            "ll,function(o){hideid(d+'FEContainer')})};";

        /** To be populated by the cache data. */
        $phpMussel['FE']['CacheData'] = '';

        /** Array of all cache items from all sources. */
        $phpMussel['CacheArray'] = ['fe_assets/frontend.dat' => []];

        /** Get cache index data. */
        if ($phpMussel['Cache']->Using) {
            foreach ($phpMussel['Cache']->getAllEntries() as $phpMussel['ThisCacheName'] => $phpMussel['ThisCacheItem']) {
                if (isset($phpMussel['ThisCacheItem']['Time']) && $phpMussel['ThisCacheItem']['Time'] > 0 && $phpMussel['ThisCacheItem']['Time'] < $phpMussel['Time']) {
                    continue;
                }
                $phpMussel['Arrayify']($phpMussel['ThisCacheItem']);
                $phpMussel['CacheArray'][$phpMussel['Cache']->Using][$phpMussel['ThisCacheName']] = $phpMussel['ThisCacheItem'];
            }
            unset($phpMussel['ThisCacheName'], $phpMussel['ThisCacheItem']);
        } elseif ($phpMussel['CacheIndexData'] = $phpMussel['ReadFile']($phpMussel['cachePath'] . 'index.dat')) {
            foreach (explode(';', $phpMussel['CacheIndexData']) as $phpMussel['CacheIndexData']) {
                if (!$phpMussel['CacheIndexData']) {
                    continue;
                }
                $phpMussel['CacheIndexData'] = explode(':', $phpMussel['CacheIndexData']);
                if (
                    isset($phpMussel['CacheIndexData'][1]) &&
                    $phpMussel['CacheIndexData'][1] > 0 &&
                    $phpMussel['Time'] >= $phpMussel['CacheIndexData'][1]
                ) {
                    continue;
                }
                $phpMussel['CacheIndexData'][1] = ($phpMussel['CacheIndexData'][1] >= 0 ? $phpMussel['TimeFormat'](
                    $phpMussel['CacheIndexData'][1],
                    $phpMussel['Config']['general']['time_format']
                ) : $phpMussel['L10N']->getString('label_never'));
                $phpMussel['CacheIndexData'][3] = bin2hex(substr($phpMussel['CacheIndexData'][0], 0, 1)) . '.tmp';
                if (!isset($phpMussel['CacheArray'][$phpMussel['CacheIndexData'][3]])) {
                    $phpMussel['CacheArray'][$phpMussel['CacheIndexData'][3]] = [];
                }
                $phpMussel['CacheIndexData'][4] = $phpMussel['FetchCache']($phpMussel['CacheIndexData'][0]);
                $phpMussel['CacheIndexData'][5] = strlen($phpMussel['CacheIndexData'][4]);
                $phpMussel['FormatFilesize']($phpMussel['CacheIndexData'][5]);
                $phpMussel['CacheArray'][$phpMussel['CacheIndexData'][3]][$phpMussel['CacheIndexData'][0]] = [
                    $phpMussel['CacheIndexData'][0] => $phpMussel['CacheIndexData'][4],
                    $phpMussel['L10N']->getString('field_size') => $phpMussel['CacheIndexData'][5],
                    $phpMussel['L10N']->getString('label_expires') => $phpMussel['CacheIndexData'][1]
                ];
            }
        }

        /** Get front-end cache data. */
        if ($phpMussel['CacheIndexData'] = $phpMussel['FE']['Cache']) {
            foreach (explode("\n", $phpMussel['CacheIndexData']) as $phpMussel['CacheIndexData']) {
                if (!$phpMussel['CacheIndexData']) {
                    continue;
                }
                $phpMussel['CacheIndexData'] = explode(',', $phpMussel['CacheIndexData']);
                $phpMussel['ThisCacheEntryName'] = base64_decode($phpMussel['CacheIndexData'][0]);
                if (isset($phpMussel['CacheIndexData'][1])) {
                    $phpMussel['CacheIndexData'][1] = base64_decode($phpMussel['CacheIndexData'][1]);
                }
                $phpMussel['CacheIndexData'][2] = ($phpMussel['CacheIndexData'][2] >= 0 ? $phpMussel['TimeFormat'](
                    $phpMussel['CacheIndexData'][2],
                    $phpMussel['Config']['general']['time_format']
                ) : $phpMussel['L10N']->getString('label_never'));
                $phpMussel['Arrayify']($phpMussel['CacheIndexData'][1]);
                $phpMussel['CacheArray']['fe_assets/frontend.dat'][$phpMussel['ThisCacheEntryName']] = $phpMussel['CacheIndexData'][1];
                $phpMussel['CacheArray']['fe_assets/frontend.dat'][$phpMussel['ThisCacheEntryName']][
                    $phpMussel['L10N']->getString('label_expires') ?: 'Expires'
                ] = $phpMussel['CacheIndexData'][2];
            }
        }
        unset($phpMussel['ThisCacheEntryName'], $phpMussel['CacheIndexData']);

        /** Begin processing all cache items from all sources. */
        foreach ($phpMussel['CacheArray'] as $phpMussel['CacheSourceName'] => $phpMussel['CacheSourceData']) {
            if (empty($phpMussel['CacheSourceData'])) {
                continue;
            }
            $phpMussel['FE']['CacheData'] .= '<div class="ng1" id="__' . ($phpMussel['CacheSourceName'] === 'fe_assets/frontend.dat' ? 'FE' : '') . 'Container"><span class="s">' . $phpMussel['CacheSourceName'] . ' – (<span style="cursor:pointer" onclick="javascript:' . (
                $phpMussel['CacheSourceName'] === 'fe_assets/frontend.dat' ? 'fecdd' : 'cdd'
            ) . '(\'__\')"><code class="s">' . $phpMussel['L10N']->getString('field_clear_all') . '</code></span>)</span><br /><br /><ul class="pieul">' . $phpMussel['ArrayToClickableList'](
                $phpMussel['CacheSourceData'],
                ($phpMussel['CacheSourceName'] === 'fe_assets/frontend.dat' ? 'fecdd' : 'cdd'),
                0,
                $phpMussel['CacheSourceName']
            ) . '</ul></div>';
        }
        unset($phpMussel['CacheSourceData'], $phpMussel['CacheSourceName'], $phpMussel['CacheArray']);

        /** Cache is empty. */
        if (!$phpMussel['FE']['CacheData']) {
            $phpMussel['FE']['CacheData'] = '<div class="ng1"><span class="s">' . $phpMussel['L10N']->getString('state_cache_is_empty') . '</span></div>';
        }

        /** Parse output. */
        $phpMussel['FE']['FE_Content'] = $phpMussel['ParseVars'](
            $phpMussel['L10N']->Data + $phpMussel['FE'],
            $phpMussel['ReadFile']($phpMussel['GetAssetPath']('_cache.html'))
        ) . $phpMussel['MenuToggle'];

        /** Send output. */
        echo $phpMussel['SendOutput']();
    }
}

/** Updates. */
elseif ($phpMussel['QueryVars']['phpmussel-page'] === 'updates' && ($phpMussel['FE']['Permissions'] === 1 || ($phpMussel['FE']['Permissions'] === 3 && $phpMussel['FE']['CronMode'] !== ''))) {
    /** Include major version notice (if relevant). */
    if ($phpMussel['MajorVersionNotice']) {
        $phpMussel['FE']['state_msg'] .= $phpMussel['MajorVersionNotice'] . '<hr />';
    }

    $phpMussel['FE']['UpdatesFormTarget'] = 'phpmussel-page=updates';
    $phpMussel['FE']['UpdatesFormTargetControls'] = '';
    $phpMussel['StateModified'] = false;
    $phpMussel['FilterSwitch'](
        ['hide-non-outdated', 'hide-unused', 'sort-by-name', 'descending-order'],
        $_POST['FilterSelector'] ?? '',
        $phpMussel['StateModified'],
        $phpMussel['FE']['UpdatesFormTarget'],
        $phpMussel['FE']['UpdatesFormTargetControls']
    );
    if ($phpMussel['StateModified']) {
        header('Location: ?' . $phpMussel['FE']['UpdatesFormTarget']);
        die;
    }
    unset($phpMussel['StateModified']);

    /** Useful for avoiding excessive IO operations when dealing with components. */
    $phpMussel['Updater-IO'] = new \Maikuolan\Common\DelayedIO();

    /** Useful for checking dependency version constraints. */
    $phpMussel['Operation'] = new \Maikuolan\Common\Operation();

    /** Updates page form boilerplate. */
    $phpMussel['CFBoilerplate'] =
        '<form action="?%s" method="POST" style="display:inline">' .
        '<input name="phpmussel-form-target" type="hidden" value="updates" />' .
        '<input name="do" type="hidden" value="%s" />';

    /** Prepare components metadata working array. */
    $phpMussel['Components'] = [
        'Meta' => [],
        'RemoteMeta' => [],
        'Remotes' => [],
        'Installed Versions' => ['PHP' => PHP_VERSION],
        'Available Versions' => [],
        'Install Together' => [],
        'Outdated' => [],
        'OutdatedSignatureFiles' => [],
        'Verify' => [],
        'Repairable' => [],
        'Out' => []
    ];

    /** Fetch components lists. */
    $phpMussel['FetchComponentsLists']($phpMussel['Vault'], $phpMussel['Components']['Meta']);

    /** Check versions beforehand (needed for dependency checks). */
    $phpMussel['CheckVersions']($phpMussel['Components']['Meta'], $phpMussel['Components']['Installed Versions']);

    $phpMussel['FE']['Indexes'] = [];

    /** Fetch available versions beforehand (needed for dependency checks). */
    foreach ($phpMussel['Components']['Meta'] as $phpMussel['Components']['Key'] => &$phpMussel['Components']['ThisComponent']) {
        if (empty($phpMussel['Components']['ThisComponent']['Remote'])) {
            continue;
        }
        if (!isset($phpMussel['Components']['Remotes'][$phpMussel['Components']['ThisComponent']['Remote']])) {
            $phpMussel['Components']['Remotes'][$phpMussel['Components']['ThisComponent']['Remote']] = '';
            $phpMussel['FetchRemote-ContextFree'](
                $phpMussel['Components']['Remotes'][$phpMussel['Components']['ThisComponent']['Remote']],
                $phpMussel['Components']['ThisComponent']['Remote']
            );
            if (($phpMussel['Components']['Remotes'][$phpMussel['Components']['ThisComponent']['Remote']] = $phpMussel['ExtractPage'](
                $phpMussel['Components']['Remotes'][$phpMussel['Components']['ThisComponent']['Remote']]
            )) !== '') {
                $phpMussel['Components']['TempRemoteMeta'] = [];
                $phpMussel['YAML']->process(
                    $phpMussel['Components']['Remotes'][$phpMussel['Components']['ThisComponent']['Remote']],
                    $phpMussel['Components']['TempRemoteMeta']
                );
                $phpMussel['Components']['Remotes'][$phpMussel['Components']['ThisComponent']['Remote']] = $phpMussel['Components']['TempRemoteMeta'];
                $phpMussel['CheckVersions'](
                    $phpMussel['Components']['Remotes'][$phpMussel['Components']['ThisComponent']['Remote']],
                    $phpMussel['Components']['Available Versions']
                );
            } else {
                $phpMussel['Components']['Remotes'][$phpMussel['Components']['ThisComponent']['Remote']] = [];
            }
        }
        if (isset($phpMussel['Components']['Remotes'][$phpMussel['Components']['ThisComponent']['Remote']][$phpMussel['Components']['Key']])) {
            $phpMussel['Components']['RemoteMeta'][$phpMussel['Components']['Key']] =
                &$phpMussel['Components']['Remotes'][$phpMussel['Components']['ThisComponent']['Remote']][$phpMussel['Components']['Key']];
        } else {
            $phpMussel['Components']['RemoteMeta'][$phpMussel['Components']['Key']] = [];
        }
    }
    unset($phpMussel['Components']['TempRemoteMeta']);

    /** A form has been submitted. */
    if (empty($phpMussel['Alternate']) && $phpMussel['FE']['FormTarget'] === 'updates' && !empty($_POST['do']) && !empty($_POST['ID'])) {
        /** Trigger updates handler. */
        $phpMussel['UpdatesHandler']($_POST['do'], $_POST['ID']);

        /** Check again, since the information might've been updated. */
        $phpMussel['CheckVersions']($phpMussel['Components']['Meta'], $phpMussel['Components']['Installed Versions']);
    }

    /** Page initial prepwork. */
    $phpMussel['InitialPrepwork']($phpMussel['L10N']->getString('link_updates'), $phpMussel['L10N']->getString('tip_updates'));

    $phpMussel['FE']['UpdatesRow'] = $phpMussel['ReadFile']($phpMussel['GetAssetPath']('_updates_row.html'));

    /** Prepare installed component metadata and options for display. */
    foreach ($phpMussel['Components']['Meta'] as $phpMussel['Components']['Key'] => &$phpMussel['Components']['ThisComponent']) {
        /** Skip if component is malformed. */
        if (empty($phpMussel['Components']['ThisComponent']['Name']) && !$phpMussel['L10N']->getString('Name ' . $phpMussel['Components']['Key'])) {
            $phpMussel['Components']['ThisComponent'] = '';
            continue;
        }

        /** Execute any necessary preload instructions. */
        if (!empty($phpMussel['Components']['ThisComponent']['When Checking'])) {
            $phpMussel['FE_Executor']($phpMussel['Components']['ThisComponent']['When Checking']);
        }

        /** Determine whether all dependency constraints have been met. */
        $phpMussel['CheckConstraints']($phpMussel['Components']['ThisComponent'], false, $phpMussel['Components']['Key']);

        $phpMussel['PrepareName']($phpMussel['Components']['ThisComponent'], $phpMussel['Components']['Key']);
        $phpMussel['PrepareExtendedDescription']($phpMussel['Components']['ThisComponent'], $phpMussel['Components']['Key']);
        $phpMussel['Components']['ThisComponent']['ID'] = $phpMussel['Components']['Key'];
        $phpMussel['Components']['ThisComponent']['Options'] = '';
        $phpMussel['Components']['ThisComponent']['StatusOptions'] = '';
        $phpMussel['Components']['ThisComponent']['StatClass'] = '';
        if (empty($phpMussel['Components']['ThisComponent']['Version'])) {
            if (empty($phpMussel['Components']['ThisComponent']['Files']['To'])) {
                $phpMussel['Components']['ThisComponent']['RowClass'] = 'h2';
                $phpMussel['Components']['ThisComponent']['Version'] = $phpMussel['L10N']->getString('response_updates_not_installed');
                $phpMussel['Components']['ThisComponent']['StatClass'] = 'txtRd';
                $phpMussel['Components']['ThisComponent']['StatusOptions'] = $phpMussel['L10N']->getString('response_updates_not_installed');
            } else {
                $phpMussel['Components']['ThisComponent']['Version'] = $phpMussel['L10N']->getString('response_updates_unable_to_determine');
                $phpMussel['Components']['ThisComponent']['StatClass'] = 's';
            }
        }
        if (!empty($phpMussel['Components']['ThisComponent']['Files'])) {
            $phpMussel['Arrayify']($phpMussel['Components']['ThisComponent']['Files']);
            $phpMussel['Arrayify']($phpMussel['Components']['ThisComponent']['Files']['To']);
            $phpMussel['Arrayify']($phpMussel['Components']['ThisComponent']['Files']['From']);
            if (isset($phpMussel['Components']['ThisComponent']['Files']['Checksum'])) {
                $phpMussel['Arrayify']($phpMussel['Components']['ThisComponent']['Files']['Checksum']);
            }
        }
        if (isset($phpMussel['Components']['Available Versions'][$phpMussel['Components']['Key']])) {
            $phpMussel['Components']['ThisComponent']['Latest'] = $phpMussel['Components']['Available Versions'][$phpMussel['Components']['Key']];
        } else {
            $phpMussel['Components']['ThisComponent']['Latest'] = $phpMussel['L10N']->getString('response_updates_unable_to_determine');
            $phpMussel['Components']['ThisComponent']['StatClass'] = 's';
        }

        /** Guard against component metadata missing at the upstream. */
        if (!isset($phpMussel['Components']['RemoteMeta'][$phpMussel['Components']['Key']])) {
            $phpMussel['Components']['RemoteMeta'][$phpMussel['Components']['Key']] = [];
        }

        /** Determine whether all dependency constraints have been met. */
        if (!isset($phpMussel['Components']['RemoteMeta'][$phpMussel['Components']['Key']]['Dependency Status'])) {
            $phpMussel['CheckConstraints']($phpMussel['Components']['RemoteMeta'][$phpMussel['Components']['Key']], true);
        }
        $phpMussel['Components']['ThisComponent']['Remote Dependency Status'] =
            $phpMussel['Components']['RemoteMeta'][$phpMussel['Components']['Key']]['Dependency Status'];
        $phpMussel['Components']['ThisComponent']['Remote All Constraints Met'] =
            $phpMussel['Components']['RemoteMeta'][$phpMussel['Components']['Key']]['All Constraints Met'];
        if (isset($phpMussel['Components']['RemoteMeta'][$phpMussel['Components']['Key']]['Install Together'])) {
            if (!isset($phpMussel['Components']['Install Together'][$phpMussel['Components']['Key']])) {
                $phpMussel['Components']['Install Together'][$phpMussel['Components']['Key']] = [];
            }
            $phpMussel['Components']['Install Together'][$phpMussel['Components']['Key']] = array_merge(
                $phpMussel['Components']['Install Together'][$phpMussel['Components']['Key']],
                $phpMussel['Components']['RemoteMeta'][$phpMussel['Components']['Key']]['Install Together']
            );
        }

        if (!empty($phpMussel['Components']['RemoteMeta'][$phpMussel['Components']['Key']]['Name'])) {
            $phpMussel['Components']['ThisComponent']['Name'] =
                $phpMussel['Components']['RemoteMeta'][$phpMussel['Components']['Key']]['Name'];
            $phpMussel['PrepareName']($phpMussel['Components']['ThisComponent'], $phpMussel['Components']['Key']);
        }
        if (!empty($phpMussel['Components']['RemoteMeta'][$phpMussel['Components']['Key']]['Extended Description'])) {
            $phpMussel['Components']['ThisComponent']['Extended Description'] =
                $phpMussel['Components']['RemoteMeta'][$phpMussel['Components']['Key']]['Extended Description'];
            $phpMussel['PrepareExtendedDescription']($phpMussel['Components']['ThisComponent'], $phpMussel['Components']['Key']);
        }
        if (!$phpMussel['Components']['ThisComponent']['StatClass']) {
            if (!empty($phpMussel['Components']['ThisComponent']['Latest']) && $phpMussel['Operation']->singleCompare(
                $phpMussel['Components']['ThisComponent']['Version'],
                '<' . $phpMussel['Components']['ThisComponent']['Latest']
            )) {
                $phpMussel['Components']['ThisComponent']['Outdated'] = true;
                $phpMussel['Components']['Outdated'][] = $phpMussel['Components']['Key'];
                if ($phpMussel['IsActivable']($phpMussel['Components']['ThisComponent'])) {
                    $phpMussel['Components']['OutdatedSignatureFiles'][] = $phpMussel['Components']['Key'];
                }
                $phpMussel['Components']['ThisComponent']['RowClass'] = 'r';
                $phpMussel['Components']['ThisComponent']['StatClass'] = 'txtRd';
                $phpMussel['Components']['ThisComponent']['StatusOptions'] = $phpMussel['L10N']->getString('response_updates_outdated');
                if (!empty($phpMussel['Components']['ThisComponent']['Remote All Constraints Met'])) {
                    $phpMussel['Components']['ThisComponent']['Options'] .=
                        '<option value="update-component">' . $phpMussel['L10N']->getString('field_update') . '</option>';
                }
            } else {
                $phpMussel['Components']['ThisComponent']['StatClass'] = 'txtGn';
                $phpMussel['Components']['ThisComponent']['StatusOptions'] = $phpMussel['L10N']->getString('response_updates_already_up_to_date');
                if (isset(
                    $phpMussel['Components']['RemoteMeta'][$phpMussel['Components']['Key']]['Files']['To'],
                    $phpMussel['Components']['RemoteMeta'][$phpMussel['Components']['Key']]['Files']['From'],
                    $phpMussel['Components']['RemoteMeta'][$phpMussel['Components']['Key']]['Files']['Checksum'],
                    $phpMussel['Components']['ThisComponent']['Files']['To'],
                    $phpMussel['Components']['ThisComponent']['Remote']
                ) && (
                    $phpMussel['Components']['RemoteMeta'][$phpMussel['Components']['Key']]['Files']['To'] === $phpMussel['Components']['ThisComponent']['Files']['To']
                )) {
                    $phpMussel['Components']['Repairable'][] = $phpMussel['Components']['Key'];
                    $phpMussel['Components']['ThisComponent']['Options'] .= '<option value="repair-component">' . $phpMussel['L10N']->getString('field_repair') . '</option>';
                }
            }
        }
        if (!empty($phpMussel['Components']['ThisComponent']['Files']['To'])) {
            $phpMussel['Activable'] = $phpMussel['IsActivable']($phpMussel['Components']['ThisComponent']);
            if (preg_match('~^(?:theme/' . preg_quote(
                $phpMussel['Config']['template_data']['theme']
            ) . '|phpMussel(?! Upload handler).*|Common Classes Package)$~i', $phpMussel['Components']['Key']) || $phpMussel['IsInUse'](
                $phpMussel['Components']['ThisComponent']
            )) {
                $phpMussel['AppendToString'](
                    $phpMussel['Components']['ThisComponent']['StatusOptions'],
                    '<hr />',
                    '<div class="txtGn">' . $phpMussel['L10N']->getString('state_component_is_active') . '</div>'
                );
                if ($phpMussel['Activable']) {
                    $phpMussel['Components']['ThisComponent']['Options'] .= '<option value="deactivate-component">' . $phpMussel['L10N']->getString('field_deactivate') . '</option>';
                    if (!empty($phpMussel['Components']['ThisComponent']['Uninstallable'])) {
                        $phpMussel['Components']['ThisComponent']['Options'] .=
                            '<option value="deactivate-and-uninstall-component">' .
                            $phpMussel['L10N']->getString('field_deactivate') . ' + ' . $phpMussel['L10N']->getString('field_uninstall') .
                            '</option>';
                    }
                }
            } else {
                if ($phpMussel['Activable']) {
                    $phpMussel['Components']['ThisComponent']['Options'] .=
                        '<option value="activate-component">' . $phpMussel['L10N']->getString('field_activate') . '</option>';
                }
                if (!empty($phpMussel['Components']['ThisComponent']['Uninstallable'])) {
                    $phpMussel['Components']['ThisComponent']['Options'] .=
                        '<option value="uninstall-component">' . $phpMussel['L10N']->getString('field_uninstall') . '</option>';
                }
                if (
                    !empty($phpMussel['Components']['ThisComponent']['Provisional']) ||
                    ($phpMussel['Config']['general']['lang_override'] && preg_match('~^L10N\:~', $phpMussel['Components']['ThisComponent']['Name']))
                ) {
                    $phpMussel['AppendToString'](
                        $phpMussel['Components']['ThisComponent']['StatusOptions'],
                        '<hr />',
                        '<div class="txtOe">' . $phpMussel['L10N']->getString('state_component_is_provisional') . '</div>'
                    );
                } else {
                    $phpMussel['AppendToString'](
                        $phpMussel['Components']['ThisComponent']['StatusOptions'],
                        '<hr />',
                        '<div class="txtRd">' . $phpMussel['L10N']->getString('state_component_is_inactive') . '</div>'
                    );
                }
            }
        }
        if (
            empty($phpMussel['Components']['ThisComponent']['Files']['To']) &&
            !empty($phpMussel['Components']['RemoteMeta'][$phpMussel['Components']['Key']]['Files']['To'])
        ) {
            if (!empty($phpMussel['Components']['ThisComponent']['Remote All Constraints Met'])) {
                $phpMussel['Components']['ThisComponent']['Options'] .= '<option value="update-component">' . $phpMussel['L10N']->getString('field_install') . '</option>';
                if ($phpMussel['IsActivable']($phpMussel['Components']['ThisComponent'])) {
                    $phpMussel['Components']['ThisComponent']['Options'] .=
                        '<option value="update-and-activate-component">' .
                        $phpMussel['L10N']->getString('field_install') . ' + ' . $phpMussel['L10N']->getString('field_activate') .
                        '</option>';
                }
            }
        }
        $phpMussel['Components']['ThisComponent']['VersionSize'] = 0;
        if (
            !empty($phpMussel['Components']['ThisComponent']['Files']['To']) &&
            is_array($phpMussel['Components']['ThisComponent']['Files']['To'])
        ) {
            $phpMussel['Components']['ThisComponent']['Options'] .=
                '<option value="verify-component" selected>' . $phpMussel['L10N']->getString('field_verify') . '</option>';
            $phpMussel['Components']['Verify'][] = $phpMussel['Components']['Key'];
        }
        if (
            !empty($phpMussel['Components']['ThisComponent']['Files']['Checksum']) &&
            is_array($phpMussel['Components']['ThisComponent']['Files']['Checksum'])
        ) {
            array_walk($phpMussel['Components']['ThisComponent']['Files']['Checksum'], function ($Checksum) use (&$phpMussel): void {
                if (!empty($Checksum) && ($Delimiter = strpos($Checksum, ':')) !== false) {
                    $phpMussel['Components']['ThisComponent']['VersionSize'] += (int)substr($Checksum, $Delimiter + 1);
                }
            });
        }
        if ($phpMussel['Components']['ThisComponent']['VersionSize'] > 0) {
            $phpMussel['FormatFilesize']($phpMussel['Components']['ThisComponent']['VersionSize']);
            $phpMussel['Components']['ThisComponent']['VersionSize'] = sprintf(
                '<br />%s %s',
                $phpMussel['L10N']->getString('field_size'),
                $phpMussel['Components']['ThisComponent']['VersionSize']
            );
        } else {
            $phpMussel['Components']['ThisComponent']['VersionSize'] = '';
        }
        $phpMussel['Components']['ThisComponent']['LatestSize'] = 0;
        if (
            !empty($phpMussel['Components']['RemoteMeta'][$phpMussel['Components']['Key']]['Files']['Checksum']) &&
            is_array($phpMussel['Components']['RemoteMeta'][$phpMussel['Components']['Key']]['Files']['Checksum'])
        ) {
            array_walk($phpMussel['Components']['RemoteMeta'][$phpMussel['Components']['Key']]['Files']['Checksum'], function ($Checksum) use (&$phpMussel): void {
                if (!empty($Checksum) && ($Delimiter = strpos($Checksum, ':')) !== false) {
                    $phpMussel['Components']['ThisComponent']['LatestSize'] += (int)substr($Checksum, $Delimiter + 1);
                }
            });
        }
        if ($phpMussel['Components']['ThisComponent']['LatestSize'] > 0) {
            $phpMussel['FormatFilesize']($phpMussel['Components']['ThisComponent']['LatestSize']);
            $phpMussel['Components']['ThisComponent']['LatestSize'] = sprintf(
                '<br />%s %s',
                $phpMussel['L10N']->getString('field_size'),
                $phpMussel['Components']['ThisComponent']['LatestSize']
            );
        } else {
            $phpMussel['Components']['ThisComponent']['LatestSize'] = '';
        }
        if (!empty($phpMussel['Components']['ThisComponent']['Options'])) {
            $phpMussel['AppendToString'](
                $phpMussel['Components']['ThisComponent']['StatusOptions'],
                '<hr />',
                '<select name="do" class="auto">' . $phpMussel['Components']['ThisComponent']['Options'] .
                '</select><input type="submit" value="' . $phpMussel['L10N']->getString('field_ok') . '" class="auto" />'
            );
            $phpMussel['Components']['ThisComponent']['Options'] = '';
        }

        /** Append changelog. */
        $phpMussel['Components']['ThisComponent']['Changelog'] = empty(
            $phpMussel['Components']['ThisComponent']['Changelog']
        ) ? '' : '<br /><a href="' . $phpMussel['Components']['ThisComponent']['Changelog'] . '" rel="noopener external">Changelog</a>';

        /** Append filename. */
        $phpMussel['Components']['ThisComponent']['Filename'] = (
            empty($phpMussel['Components']['ThisComponent']['Files']['To']) ||
            count($phpMussel['Components']['ThisComponent']['Files']['To']) !== 1
        ) ? '' : '<br />' . $phpMussel['L10N']->getString('field_filename') . ' ' . $phpMussel['Components']['ThisComponent']['Files']['To'][0];

        /** Finalise entry. */
        if (
            !($phpMussel['FE']['hide-non-outdated'] && empty($phpMussel['Components']['ThisComponent']['Outdated'])) &&
            !($phpMussel['FE']['hide-unused'] && empty($phpMussel['Components']['ThisComponent']['Files']['To']))
        ) {
            if (empty($phpMussel['Components']['ThisComponent']['RowClass'])) {
                $phpMussel['Components']['ThisComponent']['RowClass'] = 'h1';
            }
            if (!empty($phpMussel['FE']['sort-by-name']) && !empty($phpMussel['Components']['ThisComponent']['Name'])) {
                $phpMussel['Components']['ThisComponent']['SortKey'] = $phpMussel['Components']['ThisComponent']['Name'];
            } else {
                $phpMussel['Components']['ThisComponent']['SortKey'] = $phpMussel['Components']['Key'];
            }
            $phpMussel['FE']['Indexes'][$phpMussel['Components']['ThisComponent']['SortKey']] = sprintf(
                "<a href=\"#%s\">%s</a><br /><br />\n      ",
                $phpMussel['Components']['ThisComponent']['ID'],
                $phpMussel['Components']['ThisComponent']['Name']
            );
            $phpMussel['Components']['Out'][$phpMussel['Components']['ThisComponent']['SortKey']] = $phpMussel['ParseVars'](
                $phpMussel['L10N']->Data + $phpMussel['ArrayFlatten']($phpMussel['Components']['ThisComponent']) + $phpMussel['ArrayFlatten']($phpMussel['FE']),
                $phpMussel['FE']['UpdatesRow']
            );
        }
    }

    /** Update request via Cronable. */
    if (!empty($phpMussel['Alternate']) && (
        (
            $phpMussel['FE']['CronMode'] === 'Signatures' &&
            !empty($phpMussel['Components']['OutdatedSignatureFiles']) &&
            ($phpMussel['FE']['BuildUse'] = 'OutdatedSignatureFiles')
        ) || (
            $phpMussel['FE']['CronMode'] !== '' &&
            $phpMussel['FE']['CronMode'] !== 'Signatures' &&
            !empty($phpMussel['Components']['Outdated']) &&
            ($phpMussel['FE']['BuildUse'] = 'Outdated')
        )
    )) {
        /** Fetch dependency installation triggers. */
        $phpMussel['Components']['Build'] = $phpMussel['Components'][$phpMussel['FE']['BuildUse']];
        foreach ($phpMussel['Components'][$phpMussel['FE']['BuildUse']] as $phpMussel['Components']['Key']) {
            if (isset($phpMussel['Components']['Install Together'][$phpMussel['Components']['Key']])) {
                $phpMussel['Components']['Build'] = array_merge(
                    $phpMussel['Components']['Build'],
                    $phpMussel['Components']['Install Together'][$phpMussel['Components']['Key']]
                );
            }
        }
        $phpMussel['Components'][$phpMussel['FE']['BuildUse']] = array_unique($phpMussel['Components']['Build']);

        /** Trigger updates handler. */
        $phpMussel['UpdatesHandler']('update-component', $phpMussel['Components'][$phpMussel['FE']['BuildUse']]);

        /** Check again, since the information might've been updated. */
        $phpMussel['CheckVersions']($phpMussel['Components']['Meta'], $phpMussel['Components']['Installed Versions']);
    }

    /** Prepare newly found component metadata and options for display. */
    foreach ($phpMussel['Components']['Remotes'] as &$phpMussel['Components']['TheseComponents']) {
        foreach ($phpMussel['Components']['TheseComponents'] as $phpMussel['Components']['Key'] => &$phpMussel['Components']['ThisComponent']) {
            if (
                isset($phpMussel['Components']['Meta'][$phpMussel['Components']['Key']]) ||
                empty($phpMussel['Components']['ThisComponent']['Remote']) ||
                empty($phpMussel['Components']['ThisComponent']['Version']) ||
                empty($phpMussel['Components']['ThisComponent']['Files']['From']) ||
                empty($phpMussel['Components']['ThisComponent']['Files']['To']) ||
                empty($phpMussel['Components']['ThisComponent']['Reannotate']) ||
                !$phpMussel['Traverse']($phpMussel['Components']['ThisComponent']['Reannotate']) ||
                !file_exists($phpMussel['Vault'] . $phpMussel['Components']['ThisComponent']['Reannotate'])
            ) {
                continue;
            }
            $phpMussel['FetchRemote']();
            $phpMussel['Components']['RemoteDataThis'] = [];
            if (!preg_match(
                "~(\n" . preg_quote($phpMussel['Components']['Key']) . ":?)(\n [^\n]*)*\n~i",
                $phpMussel['Components']['ThisComponent']['RemoteData'],
                $phpMussel['Components']['RemoteDataThis']
            )) {
                continue;
            }
            $phpMussel['Components']['RemoteDataThis'] = preg_replace(
                ["/\n Files:(\n  [^\n]*)*\n/i", "/\n Version: [^\n]*\n/i"],
                "\n",
                $phpMussel['Components']['RemoteDataThis'][0]
            );
            $phpMussel['Components']['ReannotateThis'] = $phpMussel['Updater-IO']->readFile(
                $phpMussel['Vault'] . $phpMussel['Components']['ThisComponent']['Reannotate']
            );
            if (!$phpMussel['ExtractPage']($phpMussel['Components']['ReannotateThis'])) {
                continue;
            }
            $phpMussel['ThisOffset'] = [0 => []];
            $phpMussel['ThisOffset'][1] = preg_match(
                '/(\n+)$/',
                $phpMussel['Components']['ReannotateThis'],
                $phpMussel['ThisOffset'][0]
            );
            $phpMussel['ThisOffset'] = strlen($phpMussel['ThisOffset'][0][0]) * -1;
            $phpMussel['Components']['ReannotateThis'] = substr(
                $phpMussel['Components']['ReannotateThis'],
                0,
                $phpMussel['ThisOffset']
            ) . $phpMussel['Components']['RemoteDataThis'] . "\n";
            $phpMussel['Updater-IO']->writeFile(
                $phpMussel['Vault'] . $phpMussel['Components']['ThisComponent']['Reannotate'],
                $phpMussel['Components']['ReannotateThis']
            );

            /** Determine whether all dependency constraints have been met. */
            $phpMussel['CheckConstraints']($phpMussel['Components']['ThisComponent'], true);
            $phpMussel['Components']['ThisComponent']['Remote Dependency Status'] = $phpMussel['Components']['ThisComponent']['Dependency Status'];
            $phpMussel['Components']['ThisComponent']['Dependency Status'] = '';
            $phpMussel['Components']['ThisComponent']['Remote All Constraints Met'] = $phpMussel['Components']['ThisComponent']['All Constraints Met'];
            if (isset($phpMussel['Components']['ThisComponent']['Install Together'])) {
                if (!isset($phpMussel['Components']['Install Together'][$phpMussel['Components']['Key']])) {
                    $phpMussel['Components']['Install Together'][$phpMussel['Components']['Key']] = [];
                }
                $phpMussel['Components']['Install Together'][$phpMussel['Components']['Key']] = array_merge(
                    $phpMussel['Components']['Install Together'][$phpMussel['Components']['Key']],
                    $phpMussel['Components']['ThisComponent']['Install Together']
                );
            }

            $phpMussel['PrepareName']($phpMussel['Components']['ThisComponent'], $phpMussel['Components']['Key']);
            $phpMussel['PrepareExtendedDescription']($phpMussel['Components']['ThisComponent'], $phpMussel['Components']['Key']);
            $phpMussel['Components']['ThisComponent']['ID'] = $phpMussel['Components']['Key'];
            $phpMussel['Components']['ThisComponent']['Latest'] = $phpMussel['Components']['ThisComponent']['Version'];
            $phpMussel['Components']['ThisComponent']['Version'] = $phpMussel['L10N']->getString('response_updates_not_installed');
            $phpMussel['Components']['ThisComponent']['StatClass'] = 'txtRd';
            $phpMussel['Components']['ThisComponent']['RowClass'] = 'h2';
            $phpMussel['Components']['ThisComponent']['VersionSize'] = '';
            $phpMussel['Components']['ThisComponent']['LatestSize'] = 0;
            if (
                !empty($phpMussel['Components']['ThisComponent']['Files']['Checksum']) &&
                is_array($phpMussel['Components']['ThisComponent']['Files']['Checksum'])
            ) {
                foreach ($phpMussel['Components']['ThisComponent']['Files']['Checksum'] as $phpMussel['Components']['ThisChecksum']) {
                    if (empty($phpMussel['Components']['ThisChecksum'])) {
                        continue;
                    }
                    if (($phpMussel['FilesDelimit'] = strpos($phpMussel['Components']['ThisChecksum'], ':')) !== false) {
                        $phpMussel['Components']['ThisComponent']['LatestSize'] +=
                            (int)substr($phpMussel['Components']['ThisChecksum'], $phpMussel['FilesDelimit'] + 1);
                    }
                }
            }
            if ($phpMussel['Components']['ThisComponent']['LatestSize'] > 0) {
                $phpMussel['FormatFilesize']($phpMussel['Components']['ThisComponent']['LatestSize']);
                $phpMussel['Components']['ThisComponent']['LatestSize'] = sprintf(
                    '<br />%s %s',
                    $phpMussel['L10N']->getString('field_size'),
                    $phpMussel['Components']['ThisComponent']['LatestSize']
                );
            } else {
                $phpMussel['Components']['ThisComponent']['LatestSize'] = '';
            }
            $phpMussel['Components']['ThisComponent']['StatusOptions'] = $phpMussel['L10N']->getString('response_updates_not_installed');
            if (!empty($phpMussel['Components']['ThisComponent']['Remote All Constraints Met'])) {
                $phpMussel['Components']['ThisComponent']['StatusOptions'] .= '<br /><select name="do" class="auto">' .
                    '<option value="update-component">' . $phpMussel['L10N']->getString('field_install') . '</option>';
                if ($phpMussel['IsActivable']($phpMussel['Components']['ThisComponent'])) {
                    $phpMussel['Components']['ThisComponent']['StatusOptions'] .=
                        '<option value="update-and-activate-component">' .
                        $phpMussel['L10N']->getString('field_install') . ' + ' . $phpMussel['L10N']->getString('field_activate') .
                        '</option>';
                }
                $phpMussel['Components']['ThisComponent']['StatusOptions'] .= '</select><input type="submit" value="' . $phpMussel['L10N']->getString('field_ok') . '" class="auto" />';
            }

            /** Append changelog. */
            $phpMussel['Components']['ThisComponent']['Changelog'] = empty(
                $phpMussel['Components']['ThisComponent']['Changelog']
            ) ? '' : '<br /><a href="' . $phpMussel['Components']['ThisComponent']['Changelog'] . '" rel="noopener external">Changelog</a>';

            /** Append filename (empty). */
            $phpMussel['Components']['ThisComponent']['Filename'] = '';

            /** Finalise entry. */
            if (!$phpMussel['FE']['hide-unused']) {
                if (!empty($phpMussel['FE']['sort-by-name']) && !empty($phpMussel['Components']['ThisComponent']['Name'])) {
                    $phpMussel['Components']['ThisComponent']['SortKey'] = $phpMussel['Components']['ThisComponent']['Name'];
                } else {
                    $phpMussel['Components']['ThisComponent']['SortKey'] = $phpMussel['Components']['Key'];
                }
                $phpMussel['FE']['Indexes'][$phpMussel['Components']['ThisComponent']['SortKey']] = sprintf(
                    "<a href=\"#%s\">%s</a><br /><br />\n      ",
                    $phpMussel['Components']['ThisComponent']['ID'],
                    $phpMussel['Components']['ThisComponent']['Name']
                );
                $phpMussel['Components']['Out'][$phpMussel['Components']['ThisComponent']['SortKey']] = $phpMussel['ParseVars'](
                    $phpMussel['L10N']->Data + $phpMussel['ArrayFlatten']($phpMussel['Components']['ThisComponent']) + $phpMussel['ArrayFlatten']($phpMussel['FE']),
                    $phpMussel['FE']['UpdatesRow']
                );
            }
        }
    }

    /** Finalise output and unset working data. */
    $phpMussel['FE']['Indexes'] = $phpMussel['UpdatesSortFunc']($phpMussel['FE']['Indexes']);
    $phpMussel['FE']['Components'] = $phpMussel['UpdatesSortFunc']($phpMussel['Components']['Out']);

    $phpMussel['Components']['CountOutdated'] = count($phpMussel['Components']['Outdated']);
    $phpMussel['Components']['CountOutdatedSignatureFiles'] = count($phpMussel['Components']['OutdatedSignatureFiles']);
    $phpMussel['Components']['CountVerify'] = count($phpMussel['Components']['Verify']);
    $phpMussel['Components']['CountRepairable'] = count($phpMussel['Components']['Repairable']);

    /** Preparing the update all, verify all, repair all buttons. */
    $phpMussel['FE']['UpdateAll'] = (
        $phpMussel['Components']['CountOutdated'] ||
        $phpMussel['Components']['CountOutdatedSignatureFiles'] ||
        $phpMussel['Components']['CountVerify'] ||
        $phpMussel['Components']['CountRepairable']
    ) ? '<hr />' : '';

    /** Instructions to update all signature files (but not necessarily everything). */
    if ($phpMussel['Components']['CountOutdatedSignatureFiles']) {
        $phpMussel['FE']['UpdateAll'] .= sprintf($phpMussel['CFBoilerplate'], $phpMussel['FE']['UpdatesFormTarget'], 'update-component');
        foreach ($phpMussel['Components']['OutdatedSignatureFiles'] as $phpMussel['Components']['ThisOutdated']) {
            $phpMussel['FE']['UpdateAll'] .= '<input name="ID[]" type="hidden" value="' . $phpMussel['Components']['ThisOutdated'] . '" />';
        }
        $phpMussel['FE']['UpdateAll'] .= '<input type="submit" value="' . $phpMussel['L10N']->getString('field_update_signatures_files') . '" class="auto" /></form>';
    }

    /** Instructions to update everything at once. */
    if ($phpMussel['Components']['CountOutdated'] && $phpMussel['Components']['CountOutdated'] !== $phpMussel['Components']['CountOutdatedSignatureFiles']) {
        $phpMussel['FE']['UpdateAll'] .= sprintf($phpMussel['CFBoilerplate'], $phpMussel['FE']['UpdatesFormTarget'], 'update-component');
        foreach ($phpMussel['Components']['Outdated'] as $phpMussel['Components']['ThisOutdated']) {
            $phpMussel['FE']['UpdateAll'] .= '<input name="ID[]" type="hidden" value="' . $phpMussel['Components']['ThisOutdated'] . '" />';
        }
        $phpMussel['FE']['UpdateAll'] .= '<input type="submit" value="' . $phpMussel['L10N']->getString('field_update_all') . '" class="auto" /></form>';
    }

    /** Instructions to repair everything at once. */
    if ($phpMussel['Components']['CountRepairable']) {
        $phpMussel['FE']['UpdateAll'] .= sprintf($phpMussel['CFBoilerplate'], $phpMussel['FE']['UpdatesFormTarget'], 'repair-component');
        foreach ($phpMussel['Components']['Repairable'] as $phpMussel['Components']['ThisRepairable']) {
            $phpMussel['FE']['UpdateAll'] .= '<input name="ID[]" type="hidden" value="' . $phpMussel['Components']['ThisRepairable'] . '" />';
        }
        $phpMussel['FE']['UpdateAll'] .= '<input type="submit" value="' . $phpMussel['L10N']->getString('field_repair_all') . '" class="auto" /></form>';
    }

    /** Instructions to verify everything at once. */
    if ($phpMussel['Components']['CountVerify']) {
        $phpMussel['FE']['UpdateAll'] .= sprintf($phpMussel['CFBoilerplate'], $phpMussel['FE']['UpdatesFormTarget'], 'verify-component');
        foreach ($phpMussel['Components']['Verify'] as $phpMussel['Components']['ThisVerify']) {
            $phpMussel['FE']['UpdateAll'] .= '<input name="ID[]" type="hidden" value="' . $phpMussel['Components']['ThisVerify'] . '" />';
        }
        $phpMussel['FE']['UpdateAll'] .= '<input type="submit" value="' . $phpMussel['L10N']->getString('field_verify_all') . '" class="auto" /></form>';
    }

    /** Parse output. */
    $phpMussel['FE']['FE_Content'] = $phpMussel['ParseVars'](
        $phpMussel['L10N']->Data + $phpMussel['FE'],
        $phpMussel['ReadFile']($phpMussel['GetAssetPath']('_updates.html'))
    ) . $phpMussel['MenuToggle'];

    /** Process dependency installation triggers. */
    foreach ($phpMussel['Components']['Install Together'] as $phpMussel['Components']['Key'] => $phpMussel['Components']['ID']) {
        $phpMussel['Components']['Build'] = '';
        $phpMussel['Components']['ID'] = array_unique($phpMussel['Components']['ID']);
        foreach ($phpMussel['Components']['ID'] as $phpMussel['Components']['ThisID']) {
            $phpMussel['Components']['Build'] .= '<input name="InstallTogether[]" type="hidden" value="' . $phpMussel['Components']['ThisID'] . '" />';
        }
        $phpMussel['FE']['FE_Content'] = str_replace(
            '<input name="ID[]" type="hidden" value="' .$phpMussel['Components']['Key'] . '" />',
            $phpMussel['Components']['Build'] . '<input name="ID[]" type="hidden" value="' .$phpMussel['Components']['Key'] . '" />',
            $phpMussel['FE']['FE_Content']
        );
    }

    /** Finalise IO operations all at once. */
    unset($phpMussel['Updater-IO']);

    /** Send output. */
    if ($phpMussel['FE']['CronMode'] === '') {
        /** Normal page output. */
        echo $phpMussel['SendOutput']();
    } elseif ($phpMussel['FE']['CronType'] === 'localUpdate') {
        /** Returned state message for Cronable (updating locally). */
        $Results = ['state_msg' => str_ireplace(
            ['<code>', '</code>', '<br />', '<hr />'],
            ['[', ']', "\n", "\n---\n"],
            $phpMussel['FE']['state_msg']
        )];
    } elseif (!empty($phpMussel['FE']['state_msg'])) {
        /** Returned state message for Cronable. */
        echo json_encode(['state_msg' => str_ireplace(
            ['<code>', '</code>', '<br />', '<hr />'],
            ['[', ']', "\n", "\n---\n"],
            $phpMussel['FE']['state_msg']
        )]);
    } elseif (!empty($_POST['do']) && $_POST['do'] === 'get-list' && (
        $phpMussel['Components']['CountOutdated'] > 0 ||
        $phpMussel['Components']['CountOutdatedSignatureFiles'] > 0
    )) {
        /** Returned list of outdated components for Cronable. */
        echo json_encode([
            'state_msg' => str_ireplace(
                ['<code>', '</code>', '<br />', '<hr />'],
                ['[', ']', "\n", "\n---\n"],
                $phpMussel['FE']['state_msg']
            ),
            'outdated' => $phpMussel['Components']['CountOutdated'] > 0 ? $phpMussel['Components']['Outdated'] : [],
            'outdated_signature_files' => $phpMussel['Components']['CountOutdatedSignatureFiles'] > 0 ? $phpMussel['Components']['OutdatedSignatureFiles'] : []
        ]);
    }

    /** Cleanup. */
    unset($phpMussel['Components'], $phpMussel['CFBoilerplate'], $phpMussel['Operation']);
}

/** File Manager. */
elseif ($phpMussel['QueryVars']['phpmussel-page'] === 'file-manager' && $phpMussel['FE']['Permissions'] === 1) {
    /** Page initial prepwork. */
    $phpMussel['InitialPrepwork']($phpMussel['L10N']->getString('link_file_manager'), $phpMussel['L10N']->getString('tip_file_manager'), false);

    /** Load doughnut template file upon request. */
    if (empty($phpMussel['QueryVars']['show'])) {
        $phpMussel['FE']['ChartJSPath'] = '';
        $phpMussel['DoughnutFile'] = '';
        $phpMussel['DoughnutPath'] = '';
    } else {
        if ($phpMussel['DoughnutPath'] = $phpMussel['GetAssetPath']('_chartjs.html', true)) {
            $phpMussel['DoughnutFile'] = $phpMussel['ReadFile']($phpMussel['DoughnutPath']);
        } else {
            $phpMussel['DoughnutFile'] = '<tr><td class="h4f" colspan="2"><div class="s">{DoughnutHTML}</div></td></tr>';
        }
        $phpMussel['FE']['ChartJSPath'] = $phpMussel['GetAssetPath']('chart.min.js', true) ? '?phpmussel-asset=chart.min.js&theme=default' : '';
    }

    /** Set vault path for doughnut display. */
    $phpMussel['FE']['VaultPath'] = str_replace("\\", '/', $phpMussel['Vault']) . '*';

    /** Prepare components metadata working array. */
    $phpMussel['Components'] = ['Files' => [], 'Components' => [], 'ComponentFiles' => [], 'Names' => []];

    /** Show/hide doughnuts link and etc. */
    if (!$phpMussel['DoughnutFile']) {
        $phpMussel['FE']['FMgrFormTarget'] = 'phpmussel-page=file-manager';
        $phpMussel['FE']['ShowHideLink'] = '<a href="?phpmussel-page=file-manager&show=true">' . $phpMussel['L10N']->getString('label_show') . '</a>';
    } else {
        $phpMussel['FE']['FMgrFormTarget'] = 'phpmussel-page=file-manager&show=true';
        $phpMussel['FE']['ShowHideLink'] = '<a href="?phpmussel-page=file-manager">' . $phpMussel['L10N']->getString('label_hide') . '</a>';

        /** Fetch components lists. */
        $phpMussel['FetchComponentsLists']($phpMussel['Vault'], $phpMussel['Components']['Components']);

        /** Identifying file component correlations. */
        foreach ($phpMussel['Components']['Components'] as $phpMussel['Components']['ThisName'] => &$phpMussel['Components']['ThisData']) {
            if (!empty($phpMussel['Components']['ThisData']['Files']['To'])) {
                $phpMussel['Arrayify']($phpMussel['Components']['ThisData']['Files']['To']);
                foreach ($phpMussel['Components']['ThisData']['Files']['To'] as $phpMussel['Components']['ThisFile']) {
                    $phpMussel['Components']['ThisFile'] = str_replace("\\", '/', $phpMussel['Components']['ThisFile']);
                    $phpMussel['Components']['Files'][$phpMussel['Components']['ThisFile']] = $phpMussel['Components']['ThisName'];
                }
            }
            $phpMussel['PrepareName']($phpMussel['Components']['ThisData'], $phpMussel['Components']['ThisName']);
            if (!empty($phpMussel['Components']['ThisData']['Name'])) {
                $phpMussel['Components']['Names'][$phpMussel['Components']['ThisName']] = $phpMussel['Components']['ThisData']['Name'];
            }
            $phpMussel['Components']['ThisData'] = 0;
        }
    }

    /** Upload a new file. */
    if (isset($_POST['do']) && $_POST['do'] === 'upload-file' && isset($_FILES['upload-file']['name'])) {
        /** Check whether safe. */
        $phpMussel['SafeToContinue'] = (
            basename($_FILES['upload-file']['name']) === $_FILES['upload-file']['name'] &&
            $phpMussel['FileManager-PathSecurityCheck']($_FILES['upload-file']['name']) &&
            isset($_FILES['upload-file']['tmp_name']) &&
            isset($_FILES['upload-file']['error']) &&
            $_FILES['upload-file']['error'] === UPLOAD_ERR_OK &&
            is_uploaded_file($_FILES['upload-file']['tmp_name']) &&
            !is_link($phpMussel['Vault'] . $_FILES['upload-file']['name'])
        );

        /** If the filename already exists, delete the old file before moving the new file. */
        if ($phpMussel['SafeToContinue'] && is_readable($phpMussel['Vault'] . $_FILES['upload-file']['name'])) {
            if (is_dir($phpMussel['Vault'] . $_FILES['upload-file']['name'])) {
                if ($phpMussel['IsDirEmpty']($phpMussel['Vault'] . $_FILES['upload-file']['name'])) {
                    rmdir($phpMussel['Vault'] . $_FILES['upload-file']['name']);
                } else {
                    $phpMussel['SafeToContinue'] = false;
                }
            } else {
                unlink($phpMussel['Vault'] . $_FILES['upload-file']['name']);
            }
        }

        /** Move the newly uploaded file to the designated location. */
        if ($phpMussel['SafeToContinue']) {
            if (rename($_FILES['upload-file']['tmp_name'], $phpMussel['Vault'] . $_FILES['upload-file']['name'])) {
                $phpMussel['FE']['state_msg'] = $phpMussel['L10N']->getString('response_file_uploaded');
                header('HTTP/1.0 201 Created');
                header('HTTP/1.1 201 Created');
                header('Status: 201 Created');
            } else {
                $phpMussel['FE']['state_msg'] = $phpMussel['L10N']->getString('response_upload_error');
            }
        } else {
            $phpMussel['FE']['state_msg'] = $phpMussel['L10N']->getString('response_upload_error');
        }
    }

    /** A form was submitted. */
    elseif (
        isset($_POST['filename']) &&
        isset($_POST['do']) &&
        is_readable($phpMussel['Vault'] . $_POST['filename']) &&
        $phpMussel['FileManager-PathSecurityCheck']($_POST['filename'])
    ) {
        /** Delete a file. */
        if ($_POST['do'] === 'delete-file') {
            if (is_dir($phpMussel['Vault'] . $_POST['filename'])) {
                if ($phpMussel['IsDirEmpty']($phpMussel['Vault'] . $_POST['filename'])) {
                    rmdir($phpMussel['Vault'] . $_POST['filename']);
                    $phpMussel['FE']['state_msg'] = $phpMussel['L10N']->getString('response_directory_deleted');
                } else {
                    $phpMussel['FE']['state_msg'] = $phpMussel['L10N']->getString('response_delete_error');
                }
            } else {
                unlink($phpMussel['Vault'] . $_POST['filename']);

                /** Remove empty directories. */
                $phpMussel['DeleteDirectory']($_POST['filename']);

                $phpMussel['FE']['state_msg'] = $phpMussel['L10N']->getString('response_file_deleted');
            }
        }

        /** Rename a file. */
        if ($_POST['do'] === 'rename-file' && isset($_POST['filename'])) {
            if (isset($_POST['filename_new'])) {
                /** Check whether safe. */
                $phpMussel['SafeToContinue'] = (
                    $phpMussel['FileManager-PathSecurityCheck']($_POST['filename']) &&
                    $phpMussel['FileManager-PathSecurityCheck']($_POST['filename_new']) &&
                    $_POST['filename'] !== $_POST['filename_new']
                );

                /** If the destination already exists, delete it before renaming the new file. */
                if (
                    $phpMussel['SafeToContinue'] &&
                    file_exists($phpMussel['Vault'] . $_POST['filename_new']) &&
                    is_readable($phpMussel['Vault'] . $_POST['filename_new'])
                ) {
                    if (is_dir($phpMussel['Vault'] . $_POST['filename_new'])) {
                        if ($phpMussel['IsDirEmpty']($phpMussel['Vault'] . $_POST['filename_new'])) {
                            rmdir($phpMussel['Vault'] . $_POST['filename_new']);
                        } else {
                            $phpMussel['SafeToContinue'] = false;
                        }
                    } else {
                        unlink($phpMussel['Vault'] . $_POST['filename_new']);
                    }
                }

                /** Rename the file. */
                if ($phpMussel['SafeToContinue']) {
                    /** Add parent directories. */
                    $phpMussel['BuildPath']($phpMussel['Vault'] . $_POST['filename_new']);

                    if (rename($phpMussel['Vault'] . $_POST['filename'], $phpMussel['Vault'] . $_POST['filename_new'])) {
                        /** Remove empty directories. */
                        $phpMussel['DeleteDirectory']($_POST['filename']);

                        /** Update state message. */
                        $phpMussel['FE']['state_msg'] = $phpMussel['L10N']->getString(
                            is_dir($phpMussel['Vault'] . $_POST['filename_new']) ? 'response_directory_renamed' : 'response_file_renamed'
                        );
                    }
                } elseif (!$phpMussel['FE']['state_msg']) {
                    $phpMussel['FE']['state_msg'] = $phpMussel['L10N']->getString('response_rename_error');
                }
            } else {
                $phpMussel['FE']['FE_Title'] .= ' – ' . $phpMussel['L10N']->getString('field_rename_file') . ' – ' . $_POST['filename'];
                $phpMussel['FE']['filename'] = $_POST['filename'];

                /** Parse output. */
                $phpMussel['FE']['FE_Content'] = $phpMussel['ParseVars'](
                    $phpMussel['L10N']->Data + $phpMussel['FE'],
                    $phpMussel['ReadFile']($phpMussel['GetAssetPath']('_files_rename.html'))
                );

                /** Send output. */
                echo $phpMussel['SendOutput']();
                die;
            }
        }

        /** Edit a file. */
        if ($_POST['do'] === 'edit-file') {
            if (isset($_POST['content'])) {
                $_POST['content'] = str_replace("\r", '', $_POST['content']);
                $phpMussel['OldData'] = $phpMussel['ReadFile']($phpMussel['Vault'] . $_POST['filename']);
                if (strpos($phpMussel['OldData'], "\r\n") !== false && strpos($phpMussel['OldData'], "\n\n") === false) {
                    $_POST['content'] = str_replace("\n", "\r\n", $_POST['content']);
                }

                $phpMussel['Handle'] = fopen($phpMussel['Vault'] . $_POST['filename'], 'wb');
                fwrite($phpMussel['Handle'], $_POST['content']);
                fclose($phpMussel['Handle']);

                $phpMussel['FE']['state_msg'] = $phpMussel['L10N']->getString('response_file_edited');
            } else {
                $phpMussel['FE']['FE_Title'] .= ' – ' . $_POST['filename'];
                $phpMussel['FE']['filename'] = $_POST['filename'];
                $phpMussel['FE']['content'] = htmlentities($phpMussel['ReadFile']($phpMussel['Vault'] . $_POST['filename']));

                /** Parse output. */
                $phpMussel['FE']['FE_Content'] = $phpMussel['ParseVars'](
                    $phpMussel['L10N']->Data + $phpMussel['FE'],
                    $phpMussel['ReadFile']($phpMussel['GetAssetPath']('_files_edit.html'))
                );

                /** Send output. */
                echo $phpMussel['SendOutput']();
                die;
            }
        }

        /** Download a file. */
        if ($_POST['do'] === 'download-file') {
            header('Content-Type: application/octet-stream');
            header('Content-Transfer-Encoding: Binary');
            header('Content-disposition: attachment; filename="' . basename($_POST['filename']) . '"');
            echo $phpMussel['ReadFile']($phpMussel['Vault'] . $_POST['filename']);
            die;
        }
    }

    /** Template for file rows. */
    $phpMussel['FE']['FilesRow'] = $phpMussel['ReadFile']($phpMussel['GetAssetPath']('_files_row.html'));

    /** Parse output. */
    $phpMussel['FE']['FE_Content'] = $phpMussel['ParseVars'](
        $phpMussel['L10N']->Data + $phpMussel['FE'],
        $phpMussel['ReadFile']($phpMussel['GetAssetPath']('_files.html'))
    );

    /** Initialise files data variable. */
    $phpMussel['FE']['FilesData'] = '';

    /** Total size. */
    $phpMussel['FE']['TotalSize'] = 0;

    /** Fetch files data. */
    $phpMussel['FilesArray'] = $phpMussel['FileManager-RecursiveList']($phpMussel['Vault']);

    if (!$phpMussel['DoughnutFile']) {
        $phpMussel['FE']['Doughnut'] = '';
    } else {
        /** Sort doughnut values. */
        arsort($phpMussel['Components']['Components']);

        /** Initialise doughnut values. */
        $phpMussel['FE']['DoughnutValues'] = [];

        /** Initialise doughnut labels. */
        $phpMussel['FE']['DoughnutLabels'] = [];

        /** Initialise doughnut colours. */
        $phpMussel['FE']['DoughnutColours'] = [];

        /** Initialise doughnut legend. */
        $phpMussel['FE']['DoughnutHTML'] = '<ul class="pieul">' . $phpMussel['L10N']->getString('tip_click_the_component');

        /** Building doughnut values. */
        foreach ($phpMussel['Components']['Components'] as $phpMussel['Components']['ThisName'] => $phpMussel['Components']['ThisData']) {
            if (empty($phpMussel['Components']['ThisData'])) {
                continue;
            }
            $phpMussel['Components']['ThisSize'] = $phpMussel['Components']['ThisData'];
            $phpMussel['FormatFilesize']($phpMussel['Components']['ThisSize']);
            $phpMussel['Components']['ThisListed'] = '';
            if (!empty($phpMussel['Components']['ComponentFiles'][$phpMussel['Components']['ThisName']])) {
                $phpMussel['Components']['ThisComponentFiles'] = &$phpMussel['Components']['ComponentFiles'][$phpMussel['Components']['ThisName']];
                arsort($phpMussel['Components']['ThisComponentFiles']);
                $phpMussel['Components']['ThisListed'] .= '<ul class="comSub">';
                foreach ($phpMussel['Components']['ThisComponentFiles'] as $phpMussel['Components']['ThisFile'] => $phpMussel['Components']['ThisFileSize']) {
                    $phpMussel['FormatFilesize']($phpMussel['Components']['ThisFileSize']);
                    $phpMussel['Components']['ThisListed'] .= sprintf(
                        '<li><span class="txtBl" style="font-size:0.9em">%s – %s</span></li>',
                        $phpMussel['Components']['ThisFile'],
                        $phpMussel['Components']['ThisFileSize']
                    );
                }
                $phpMussel['Components']['ThisListed'] .= '</ul>';
            }
            $phpMussel['Components']['ThisName'] .= ' – ' . $phpMussel['Components']['ThisSize'];
            $phpMussel['FE']['DoughnutValues'][] = $phpMussel['Components']['ThisData'];
            $phpMussel['FE']['DoughnutLabels'][] = $phpMussel['Components']['ThisName'];
            if ($phpMussel['DoughnutPath']) {
                $phpMussel['Components']['ThisColour'] = $phpMussel['RGB']($phpMussel['Components']['ThisName']);
                $phpMussel['Components']['RGB'] = implode(',', $phpMussel['Components']['ThisColour']['Values']);
                $phpMussel['FE']['DoughnutColours'][] = '#' . $phpMussel['Components']['ThisColour']['Hash'];
                $phpMussel['FE']['DoughnutHTML'] .= sprintf(
                    '<li style="background:linear-gradient(90deg,rgba(%1$s,%5$s),rgba(%1$s,%6$s));color:#%2$s"><span class="comCat"><span class="txtBl">%3$s</span></span>%4$s</li>',
                    $phpMussel['Components']['RGB'],
                    $phpMussel['Components']['ThisColour']['Hash'],
                    $phpMussel['Components']['ThisName'],
                    $phpMussel['Components']['ThisListed'],
                    $phpMussel['FE']['FE_Align'] === 'left' ? '.3' : '0',
                    $phpMussel['FE']['FE_Align'] === 'left' ? '0' : '.3'
                ) . "\n";
            } else {
                $phpMussel['FE']['DoughnutHTML'] .= sprintf(
                    '<li><span class="comCat">%1$s</span>%2$s</li>',
                    $phpMussel['Components']['ThisName'],
                    $phpMussel['Components']['ThisListed']
                ) . "\n";
            }
        }

        /** Close doughnut legend and append necessary JavaScript for doughnut menu toggle. */
        $phpMussel['FE']['DoughnutHTML'] .= '</ul>' . $phpMussel['MenuToggle'];

        /** Finalise doughnut values. */
        $phpMussel['FE']['DoughnutValues'] = '[' . implode(', ', $phpMussel['FE']['DoughnutValues']) . ']';

        /** Finalise doughnut labels. */
        $phpMussel['FE']['DoughnutLabels'] = '["' . implode('", "', $phpMussel['FE']['DoughnutLabels']) . '"]';

        /** Finalise doughnut colours. */
        $phpMussel['FE']['DoughnutColours'] = '["' . implode('", "', $phpMussel['FE']['DoughnutColours']) . '"]';

        /** Finalise doughnut. */
        $phpMussel['FE']['Doughnut'] = $phpMussel['ParseVars']($phpMussel['L10N']->Data + $phpMussel['FE'], $phpMussel['DoughnutFile']);
    }

    /** Cleanup. */
    unset($phpMussel['DoughnutFile'], $phpMussel['DoughnutPath'], $phpMussel['Components']);

    /** Process files data. */
    array_walk($phpMussel['FilesArray'], function ($ThisFile) use (&$phpMussel): void {
        $Base = '<option value="%s"%s>%s</option>';
        $ThisFile['ThisOptions'] = '';
        if (!$ThisFile['Directory'] || $phpMussel['IsDirEmpty']($phpMussel['Vault'] . $ThisFile['Filename'])) {
            $ThisFile['ThisOptions'] .= sprintf($Base, 'delete-file', ' class="txtRd"', $phpMussel['L10N']->getString('field_delete_file'));
            $ThisFile['ThisOptions'] .= sprintf($Base, 'rename-file', $ThisFile['Directory'] && !$ThisFile['CanEdit'] ? ' selected' : '', $phpMussel['L10N']->getString('field_rename_file'));
        }
        if ($ThisFile['CanEdit']) {
            $ThisFile['ThisOptions'] .= sprintf($Base, 'edit-file', ' selected', $phpMussel['L10N']->getString('field_edit_file'));
        }
        if (!$ThisFile['Directory']) {
            $ThisFile['ThisOptions'] .= sprintf($Base, 'download-file', $ThisFile['CanEdit'] ? '' : ' selected', $phpMussel['L10N']->getString('field_download_file'));
        }
        if ($ThisFile['ThisOptions']) {
            $ThisFile['ThisOptions'] =
                '<select name="do">' . $ThisFile['ThisOptions'] . '</select>' .
                '<input type="submit" value="' . $phpMussel['L10N']->getString('field_ok') . '" class="auto" />';
        }
        $phpMussel['FE']['FilesData'] .= $phpMussel['ParseVars'](
            $phpMussel['L10N']->Data + $phpMussel['FE'] + $ThisFile,
            $phpMussel['FE']['FilesRow']
        );
    });

    /** Total size. */
    $phpMussel['FormatFilesize']($phpMussel['FE']['TotalSize']);

    /** Disk free space. */
    $phpMussel['FE']['FreeSpace'] = disk_free_space(__DIR__);

    /** Disk total space. */
    $phpMussel['FE']['TotalSpace'] = disk_total_space(__DIR__);

    /** Disk total usage. */
    $phpMussel['FE']['TotalUsage'] = $phpMussel['FE']['TotalSpace'] - $phpMussel['FE']['FreeSpace'];

    $phpMussel['FormatFilesize']($phpMussel['FE']['FreeSpace']);
    $phpMussel['FormatFilesize']($phpMussel['FE']['TotalSpace']);
    $phpMussel['FormatFilesize']($phpMussel['FE']['TotalUsage']);

    /** Send output. */
    echo $phpMussel['SendOutput']();
}

/** Upload Test. */
elseif ($phpMussel['QueryVars']['phpmussel-page'] === 'upload-test' && $phpMussel['FE']['Permissions'] === 1) {
    /** Page initial prepwork. */
    $phpMussel['InitialPrepwork']($phpMussel['L10N']->getString('link_upload_test'), $phpMussel['L10N']->getString('tip_upload_test'), false);

    /** Append upload test JS. */
    $phpMussel['FE']['JS'] .=
        "var x=1;more=function(){var t='field'+x,e=document.createElement('div');" .
        "e.setAttribute('class','spanner'),e.setAttribute('id',t),e.setAttribute(" .
        "'style','opacity:0;animation:UplT 2s ease 0s 1 normal'),(z=document.crea" .
        "teElement('input')).setAttribute('name','upload_test[]'),z.setAttribute(" .
        "'type','file'),e.appendChild(z),document.getElementById('upload_fields')" .
        ".appendChild(e),setTimeout(function(){document.getElementById(t).style.o" .
        "pacity='1'},1999),x++};";

    $phpMussel['FE']['MaxFilesize'] = $phpMussel['ReadBytes']($phpMussel['Config']['files']['filesize_limit']);

    /** Parse output. */
    $phpMussel['FE']['FE_Content'] = $phpMussel['ParseVars'](
        $phpMussel['L10N']->Data + $phpMussel['FE'],
        $phpMussel['ReadFile']($phpMussel['GetAssetPath']('_upload_test.html'))
    );

    /** Send output. */
    echo $phpMussel['SendOutput']();
}

/** Quarantine. */
elseif ($phpMussel['QueryVars']['phpmussel-page'] === 'quarantine' && $phpMussel['FE']['Permissions'] === 1) {
    /** Page initial prepwork. */
    $phpMussel['InitialPrepwork']($phpMussel['L10N']->getString('link_quarantine'), $phpMussel['L10N']->getString('tip_quarantine'));

    /** Display how to enable quarantine if currently disabled. */
    if (!$phpMussel['Config']['general']['quarantine_key']) {
        $phpMussel['FE']['state_msg'] .= '<span class="txtRd">' . $phpMussel['L10N']->getString('tip_quarantine_disabled') . '</span><br />';
    }

    /** Generate confirm button. */
    $phpMussel['FE']['Confirm-DeleteAll'] = $phpMussel['GenerateConfirm']($phpMussel['L10N']->getString('field_delete_all'), 'quarantineForm');

    /** Append necessary quarantine JS. */
    $phpMussel['FE']['JS'] .= "function qOpt(e){b=document.getElementById(e+'-S'),'delete-file'==b.value?hideid(e):showid(e)}\n";

    /** A form was submitted. */
    if (
        !empty($_POST['qfu']) &&
        !empty($_POST['do']) &&
        !is_dir($phpMussel['qfuPath'] . $_POST['qfu']) &&
        is_readable($phpMussel['qfuPath'] . $_POST['qfu']) &&
        $phpMussel['FileManager-PathSecurityCheck']($_POST['qfu'])
    ) {
        if ($_POST['do'] === 'delete-file') {
            $phpMussel['FE']['state_msg'] .= '<code>' . $_POST['qfu'] . '</code> ' . $phpMussel['L10N']->getString(
                unlink($phpMussel['qfuPath'] . $_POST['qfu']) ? 'response_file_deleted' : 'response_delete_error'
            ) . '<br />';
        } elseif ($_POST['do'] === 'download-file' || $_POST['do'] === 'restore-file') {
            if (empty($_POST['qkey'])) {
                $phpMussel['FE']['state_msg'] .= '<code>' . $_POST['qfu'] . '</code> ' . $phpMussel['L10N']->getString('response_restore_error_2') . '<br />';
            } else {
                /** Attempt to restore the file. */
                $phpMussel['Restored'] = $phpMussel['Quarantine-Restore']($phpMussel['qfuPath'] . $_POST['qfu'], $_POST['qkey']);

                /** Restore success! */
                if (empty($phpMussel['RestoreStatus'])) {
                    /** Download the file. */
                    if ($_POST['do'] === 'download-file') {
                        header('Content-Type: application/octet-stream');
                        header('Content-Transfer-Encoding: Binary');
                        header('Content-disposition: attachment; filename="' . basename($_POST['qfu']) . '.restored"');
                        echo $phpMussel['Restored'];
                        die;
                    }

                    /** Restore the file. */
                    $phpMussel['Handle'] = fopen($phpMussel['qfuPath'] . $_POST['qfu'] . '.restored', 'wb');
                    fwrite($phpMussel['Handle'], $phpMussel['Restored']);
                    fclose($phpMussel['Handle']);
                    $phpMussel['FE']['state_msg'] .= '<code>' . $_POST['qfu'] . '.restored</code> ' . $phpMussel['L10N']->getString('response_file_restored') . '<br />';
                } elseif ($phpMussel['RestoreStatus'] === 2) {
                    /** Corrupted file! */
                    $phpMussel['FE']['state_msg'] .= '<code>' . $_POST['qfu'] . '</code> ' . $phpMussel['L10N']->getString('response_restore_error_1') . '<br />';
                } else {
                    /** Incorrect quarantine key! */
                    $phpMussel['FE']['state_msg'] .= '<code>' . $_POST['qfu'] . '</code> ' . $phpMussel['L10N']->getString('response_restore_error_2') . '<br />';
                }

                /** Cleanup. */
                unset($phpMussel['RestoreStatus'], $phpMussel['Restored']);
            }
        }
    }

    /** Template for quarantine files row. */
    $phpMussel['FE']['QuarantineRow'] = $phpMussel['ReadFile']($phpMussel['GetAssetPath']('_quarantine_row.html'));

    /** Fetch quarantine data array. */
    $phpMussel['FilesInQuarantine'] = $phpMussel['Quarantine-RecursiveList']();

    /** Number of files in quarantine. */
    $phpMussel['FilesInQuarantineCount'] = count($phpMussel['FilesInQuarantine']);

    /** Number of files in quarantine state message. */
    $phpMussel['FE']['state_msg'] .= sprintf(
        $phpMussel['L10N']->getPlural($phpMussel['FilesInQuarantineCount'], 'state_quarantine'),
        '<span class="txtRd">' . $phpMussel['NumberFormatter']->format($phpMussel['FilesInQuarantineCount']) . '</span>'
    ) . '<br />';

    /** Initialise quarantine data string. */
    $phpMussel['FE']['FilesInQuarantine'] = '';

    /** Process quarantine files data. */
    array_walk($phpMussel['FilesInQuarantine'], function ($ThisFile) use (&$phpMussel): void {
        $phpMussel['FE']['FilesInQuarantine'] .= $phpMussel['ParseVars'](
            $phpMussel['L10N']->Data + $phpMussel['FE'] + $ThisFile,
            $phpMussel['FE']['QuarantineRow']
        );
    });

    /** Cleanup. */
    unset($phpMussel['FilesInQuarantineCount'], $phpMussel['FilesInQuarantine']);

    /** Parse output. */
    $phpMussel['FE']['FE_Content'] = $phpMussel['ParseVars'](
        $phpMussel['L10N']->Data + $phpMussel['FE'],
        $phpMussel['ReadFile']($phpMussel['GetAssetPath']('_quarantine.html'))
    );

    /** Send output. */
    echo $phpMussel['SendOutput']();
}

/** Signature information. */
elseif ($phpMussel['QueryVars']['phpmussel-page'] === 'siginfo' && $phpMussel['FE']['Permissions'] === 1) {
    /** Page initial prepwork. */
    $phpMussel['InitialPrepwork']($phpMussel['L10N']->getString('link_siginfo'), $phpMussel['L10N']->getString('tip_siginfo'));

    /** Append number localisation JS. */
    $phpMussel['FE']['JS'] .= $phpMussel['Number_L10N_JS']() . "\n";

    /** Template for range rows. */
    $phpMussel['FE']['InfoRow'] = $phpMussel['ReadFile']($phpMussel['GetAssetPath']('_siginfo_row.html'));

    /** Process signature files and fetch relevant values. */
    $phpMussel['FE']['InfoRows'] = $phpMussel['SigInfoHandler'](
        array_unique(array_filter(explode(',', $phpMussel['Config']['signatures']['active']), function ($Item) {
            return !empty($Item);
        }))
    );

    /** Calculate and append page load time, and append totals. */
    $phpMussel['FE']['ProcTime'] = microtime(true) - $_SERVER['REQUEST_TIME_FLOAT'];
    $phpMussel['FE']['ProcTime'] = '<div class="s">' . sprintf(
        $phpMussel['L10N']->getPlural($phpMussel['FE']['ProcTime'], 'state_loadtime'),
        '<span class="txtRd">' . $phpMussel['NumberFormatter']->format($phpMussel['FE']['ProcTime'], 3) . '</span>'
    ) . '</div>';

    /** Parse output. */
    $phpMussel['FE']['FE_Content'] = $phpMussel['ParseVars'](
        $phpMussel['L10N']->Data + $phpMussel['FE'],
        $phpMussel['ReadFile']($phpMussel['GetAssetPath']('_siginfo.html'))
    );

    /** Send output. */
    echo $phpMussel['SendOutput']();
}

/** Statistics. */
elseif ($phpMussel['QueryVars']['phpmussel-page'] === 'statistics' && $phpMussel['FE']['Permissions'] === 1) {
    /** Page initial prepwork. */
    $phpMussel['InitialPrepwork']($phpMussel['L10N']->getString('link_statistics'), $phpMussel['L10N']->getString('tip_statistics'), false);

    /** Display how to enable statistics if currently disabled. */
    if (!$phpMussel['Config']['general']['statistics']) {
        $phpMussel['FE']['state_msg'] .= '<span class="txtRd">' . $phpMussel['L10N']->getString('tip_statistics_disabled') . '</span><br />';
    }

    /** Generate confirm button. */
    $phpMussel['FE']['Confirm-ClearAll'] = $phpMussel['GenerateConfirm']($phpMussel['L10N']->getString('field_clear_all'), 'statForm');

    /** Fetch statistics cache data. */
    if ($phpMussel['Statistics'] = ($phpMussel['FetchCache']('Statistics') ?: [])) {
        if (is_string($phpMussel['Statistics'])) {
            unserialize($phpMussel['Statistics']) ?: [];
        }
    }

    /** Clear statistics. */
    if (!empty($_POST['ClearStats'])) {
        $phpMussel['SaveCache']('Statistics', 1, '-');
        $phpMussel['Statistics'] = [];
        $phpMussel['FE']['state_msg'] .= $phpMussel['L10N']->getString('response_statistics_cleared') . '<br />';
    }

    /** Statistics have been counted since... */
    $phpMussel['FE']['Other-Since'] = empty($phpMussel['Statistics']['Other-Since']) ? '-' : $phpMussel['TimeFormat'](
        $phpMussel['Statistics']['Other-Since'],
        $phpMussel['Config']['general']['time_format']
    );

    /** Fetch and process various statistics. */
    foreach ([
        'Web-Events',
        'Web-Scanned',
        'Web-Blocked',
        'Web-Quarantined',
        'CLI-Events',
        'CLI-Scanned',
        'CLI-Flagged',
        'API-Events',
        'API-Scanned',
        'API-Flagged'
    ] as $phpMussel['TheseStats']) {
        $phpMussel['FE'][$phpMussel['TheseStats']] = $phpMussel['NumberFormatter']->format(
            $phpMussel['Statistics'][$phpMussel['TheseStats']] ?? 0
        );
    }

    /** Active signature files. */
    if (empty($phpMussel['Config']['signatures']['active'])) {
        $phpMussel['FE']['Other-Active'] = $phpMussel['NumberFormatter']->format(0);
        $phpMussel['FE']['Class-Active'] = 'txtRd';
    } else {
        $phpMussel['FE']['Other-Active'] = 0;
        foreach (explode(',', $phpMussel['Config']['signatures']['active']) as $phpMussel['StatWorking']) {
            if (strlen($phpMussel['StatWorking']) && is_readable($phpMussel['sigPath'] . $phpMussel['StatWorking'])) {
                $phpMussel['FE']['Other-Active']++;
            }
        }
        $phpMussel['FE']['Other-Active'] = $phpMussel['NumberFormatter']->format(
            $phpMussel['FE']['Other-Active']
        );
        $phpMussel['FE']['Class-Active'] = $phpMussel['FE']['Other-Active'] ? 'txtGn' : 'txtRd';
    }

    /** Parse output. */
    $phpMussel['FE']['FE_Content'] = $phpMussel['ParseVars'](
        $phpMussel['L10N']->Data + $phpMussel['FE'],
        $phpMussel['ReadFile']($phpMussel['GetAssetPath']('_statistics.html'))
    );

    /** Send output. */
    echo $phpMussel['SendOutput']();

    /** Cleanup. */
    unset($phpMussel['StatWorking'], $phpMussel['Statistics']);
}

/** Logs. */
elseif ($phpMussel['QueryVars']['phpmussel-page'] === 'logs' && $phpMussel['FE']['Permissions'] > 0) {
    /** Page initial prepwork. */
    $phpMussel['InitialPrepwork']($phpMussel['L10N']->getString('link_logs'), $phpMussel['L10N']->getString('tip_logs'), false);

    /** Parse output. */
    $phpMussel['FE']['FE_Content'] = $phpMussel['ParseVars'](
        $phpMussel['L10N']->Data + $phpMussel['FE'],
        $phpMussel['ReadFile']($phpMussel['GetAssetPath']('_logs.html'))
    );

    /** Initialise array for fetching logs data. */
    $phpMussel['FE']['LogFiles'] = [
        'Files' => $phpMussel['Logs-RecursiveList']($phpMussel['Vault']),
        'Out' => ''
    ];

    /** Text mode switch link base. */
    $phpMussel['FE']['TextModeSwitchLink'] = '';

    /** How to display the log data? */
    if (empty($phpMussel['QueryVars']['text-mode']) || $phpMussel['QueryVars']['text-mode'] === 'false') {
        $phpMussel['FE']['TextModeLinks'] = 'false';
        $phpMussel['FE']['TextMode'] = false;
    } else {
        $phpMussel['FE']['TextModeLinks'] = 'true';
        $phpMussel['FE']['TextMode'] = true;
    }

    /** Define log data. */
    if (empty($phpMussel['QueryVars']['logfile'])) {
        $phpMussel['FE']['logfileData'] = $phpMussel['L10N']->getString('logs_no_logfile_selected');
    } elseif (empty($phpMussel['FE']['LogFiles']['Files'][$phpMussel['QueryVars']['logfile']])) {
        $phpMussel['FE']['logfileData'] = $phpMussel['L10N']->getString('logs_logfile_doesnt_exist');
    } else {
        $phpMussel['FE']['TextModeSwitchLink'] .= '?phpmussel-page=logs&logfile=' . $phpMussel['QueryVars']['logfile'] . '&text-mode=';
        if (strtolower(substr($phpMussel['QueryVars']['logfile'], -3)) === '.gz') {
            $phpMussel['GZLogHandler'] = gzopen($phpMussel['Vault'] . $phpMussel['QueryVars']['logfile'], 'rb');
            $phpMussel['FE']['logfileData'] = '';
            if (is_resource($phpMussel['GZLogHandler'])) {
                while (!gzeof($phpMussel['GZLogHandler'])) {
                    $phpMussel['FE']['logfileData'] .= gzread($phpMussel['GZLogHandler'], 131072);
                }
                gzclose($phpMussel['GZLogHandler']);
            }
            unset($phpMussel['GZLogHandler']);
        } else {
            $phpMussel['FE']['logfileData'] = $phpMussel['ReadFile']($phpMussel['Vault'] . $phpMussel['QueryVars']['logfile']);
        }
        $phpMussel['FE']['logfileData'] = $phpMussel['FE']['TextMode'] ? str_replace(
            ['<', '>', "\r", "\n"],
            ['&lt;', '&gt;', '', "<br />\n"],
            $phpMussel['FE']['logfileData']
        ) : str_replace(
            ['<', '>', "\r"],
            ['&lt;', '&gt;', ''],
            $phpMussel['FE']['logfileData']
        );
        $phpMussel['FE']['mod_class_nav'] = ' big';
        $phpMussel['FE']['mod_class_right'] = ' extend';
    }
    if (empty($phpMussel['FE']['mod_class_nav'])) {
        $phpMussel['FE']['mod_class_nav'] = ' extend';
        $phpMussel['FE']['mod_class_right'] = ' big';
    }
    if (empty($phpMussel['FE']['TextModeSwitchLink'])) {
        $phpMussel['FE']['TextModeSwitchLink'] .= '?phpmussel-page=logs&text-mode=';
    }

    /** Text mode switch link formatted. */
    $phpMussel['FE']['TextModeSwitchLink'] = sprintf(
        $phpMussel['L10N']->getString('link_textmode'),
        $phpMussel['FE']['TextModeSwitchLink']
    );

    /** Prepare log data formatting. */
    if (!$phpMussel['FE']['TextMode']) {
        $phpMussel['FE']['logfileData'] = '<textarea readonly>' . $phpMussel['FE']['logfileData'] . '</textarea>';
    } else {
        $phpMussel['Formatter']($phpMussel['FE']['logfileData']);
    }

    /** Define logfile list. */
    array_walk($phpMussel['FE']['LogFiles']['Files'], function ($Arr) use (&$phpMussel): void {
        $phpMussel['FE']['LogFiles']['Out'] .= sprintf(
            '      <a href="?phpmussel-page=logs&logfile=%1$s&text-mode=%3$s">%1$s</a> – %2$s<br />',
            $Arr['Filename'],
            $Arr['Filesize'],
            $phpMussel['FE']['TextModeLinks']
        ) . "\n";
    });

    /** Calculate page load time (useful for debugging). */
    $phpMussel['FE']['ProcessTime'] = microtime(true) - $_SERVER['REQUEST_TIME_FLOAT'];
    $phpMussel['FE']['ProcessTime'] = '<br />' . sprintf(
        $phpMussel['L10N']->getPlural($phpMussel['FE']['ProcessTime'], 'state_loadtime'),
        '<span class="txtRd">' . $phpMussel['NumberFormatter']->format($phpMussel['FE']['ProcessTime'], 3) . '</span>'
    );

    /** Set logfile list or no logfiles available message. */
    $phpMussel['FE']['LogFiles'] = $phpMussel['FE']['LogFiles']['Out'] ?: $phpMussel['L10N']->getString('logs_no_logfiles_available');

    /** Send output. */
    echo $phpMussel['SendOutput']();
}

/** Rebuild cache. */
if ($phpMussel['FE']['Rebuild']) {
    $phpMussel['FE']['FrontEndData'] =
        "USERS\n-----" . $phpMussel['FE']['UserList'] .
        "\nSESSIONS\n--------" . $phpMussel['FE']['SessionList'] .
        "\nCACHE\n-----" . $phpMussel['FE']['Cache'];
    $phpMussel['Handle'] = fopen($phpMussel['Vault'] . 'fe_assets/frontend.dat', 'wb');
    fwrite($phpMussel['Handle'], $phpMussel['FE']['FrontEndData']);
    fclose($phpMussel['Handle']);
}

/** Print Cronable failure state messages here. */
if ($phpMussel['FE']['CronMode'] !== '' && $phpMussel['FE']['state_msg'] !== '' && $phpMussel['FE']['UserState'] !== 1) {
    if ($phpMussel['FE']['CronType'] === 'localUpdate') {
        $Results = ['state_msg' => $phpMussel['FE']['state_msg']];
    } else {
        echo json_encode(['state_msg' => $phpMussel['FE']['state_msg']]);
    }
}

/** Exit front-end. */
if (empty($phpMussel['Alternate']) && $phpMussel['FE']['CronType'] !== 'localUpdate') {
    die;
}
